-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 3752 characters

local ScriptFunctions = {
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 75 then
		script.Parent.Sound.Pitch = 1
		script.Parent.Sound.Volume = 1
		script.Parent.Sound:play()
		script.Parent.CanCollide = false
		script.Parent.Anchored = true
		script.Parent:BreakJoints()
		script.Disabled = true
		script.Parent.Name = "Broken Glass Ball"
		script.Parent.Transparency = 0.5
		wait(1)
		script.Parent.Anchored = false
		wait(10)
		script.Parent:remove()
	end
end

script.Parent.Touched:connect(onHit)
end,
function(script,require)
function onHit(part)
	vX = math.abs(part.Velocity.x - script.Parent.Velocity.x)
	vY = math.abs(part.Velocity.y - script.Parent.Velocity.y)
	vZ = math.abs(part.Velocity.z - script.Parent.Velocity.z)
	totalVelocity = vX + vY + vZ
	if totalVelocity >= 30 then
		script.Parent.Sound:Play()
	end
end

script.Parent.Touched:connect(onHit)
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AACPIQRQYXJ0IQROYW1lIQpHbGFzcyBCYWxsIQ1Cb3R0b21TdXJmYWNlAwAAAAAAAAAAIQpCcmlja0NvbG9yBzsBIQZDRnJhbWUEEXN0IQVDb2xvcgYJic8hCE1hdGVyaWFsAwAAAAAAAHFAIQtPcmllbnRhdGlvbgoAAPBB9igNQh+FoMIhCFBvc2l0aW9uCmN2rkEX'
..'AEBA5H4uQiELUmVmbGVjdGFuY2UDAAAAQDMz4z8hCFJvdGF0aW9uCnsUDUL2KPBBAIDHwiEEU2l6ZQoAAMBAAADAQAAAwEAhClRvcFN1cmZhY2UhDFRyYW5zcGFyZW5jeQMAAACAmZnZPyEFU2hhcGUhBVNvdW5kIQ1QbGF5YmFja1NwZWVkAwAAAAAAAABAIRJSb2xs'
..'T2ZmTWluRGlzdGFuY2UhB1NvdW5kSWQhKGh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9MTE0MTU3MzghBlZvbHVtZQMAAACgmZm5PyEGU2NyaXB0IQVHbGFzcwQnc3UKqXewQS4A4D9BvTJCCgAAgD8AAIA/AACAPwQqc3UKlaOxQbWgJkBBvTRCBCxzdQqV'
..'o7FBXFCTQBoVL0IELnN1CpWjtUFbUINALekxQgQwc3UKlaOlQVxQg0AGQSxCBDJzdQqod6RBGgBQQAZBKkIENHN1CtAfrkHcvgJAGhUpQgQ2c3UK0B+yQbh9xT8t6StCBDhzdQqBz65BVEF9QC3pM0IEOnN1CoHPqkGqoI5AGhUxQgQ8c3UKvEunQfW+8j8aFStCBD5z'
..'dQq8S6tB876yPy3pLUIEQHN1CpWjoUG3oCZAGhUvQgRCc3UKgc+iQVVBXUAaFTFCBERzdQqBz6ZBVEE9QC3pM0IERnN1CpWjpUG2oAZALekxQgRIc3UKvEurQXxfWUAGQShCBEpzdQqpd7hBFwAwQEG9MkIETHN1Cr1Lu0F6X1lALektQgROc3UKvEu3QXtfeUAaFStC'
..'BFBzdQrQH7pB3L4iQC3pK0IEUnN1CrxLt0HyvvI/Qb0wQgRUc3UK0B+2Qd2+QkAaFSlCBFZzdQqod6xBDQCIQAZBKkIhB01vdG9yNkQhAkMxBHZ3eCEFUGFydDAhBVBhcnQxBHl3eAR6d3gEe3d4BHx3eAR9d3gEfnd4BH93eASAd3gEgXd4BIJ3eASDd3gEhHd4BIV3'
..'eASGd3gEh3d4BIh3eASJd3gEind4BIt3eASMd3gEjXd4BI53eASPd3gKQRYWvsyDWr/E9v++Cpx2Wj8XABY+hBMAvwqedlo/GAAWPoUTAL8KEtv/vvQ+AL/z6r8/CgAAgD8AEgEsAAAAAAoAEgEsAQCAPwAAAAAKdhIAP5Q1AL//6r8/CtDt/74Ygv8+cfW/PwoXCQA/'
..'2JT/Pn31vz8KJcj/vvwUwL/Vgf8+Cu0bAD9MEMC/BoL/PgoFHAA/0AXAv/0+AL8K9cf/voAKwL8WPwC/ClMJwD9AAgC/6SkAvwpHCcA/PBcAvy6s/z4KowTAP4D7/z7tFAC/CpcEwD+I0f8+Jtb/PgowAAC/A+u/P7z//z4KGAAAv4H1vz8iAAC/CtD//z4w+r8/CgAA'
..'vwqh//8+su+/P+z//z4KQu3/vgAAAD+PCsC/CoTa/74AAAC/DhXAvwq+EgA/QO3/vgEVwL8KXwkAP2AJAD+DCsC/Crn2v79YMwC/m6v/Pgpp+7+/UJn/PpPV/z4KXfu/v0jD/z43FQC/Cq32v79cHgC/MioAv3wBAA4AAgMEBQYHCAkKCwwNDg8QERITFBUWFxgFGRob'
..'BRwBBAAdHh8FICEiIyQBAAAkAQAAAQEMAAIlBAUGBwgmCgsMDQ4PECcSExQVFigYBRwFBAAdHh8FICEiIyQFAAAkBQAAAQEMAAIlBAUGBwgpCgsMDQ4PECoSExQVFigYBRwJBAAdHh8FICEiIyQJAAAkCQAAAQEMAAIlBAUGBwgrCgsMDQ4PECwSExQVFigYBRwNBAAd'
..'Hh8FICEiIyQNAAAkDQAAAQEMAAIlBAUGBwgtCgsMDQ4PEC4SExQVFigYBRwRBAAdHh8FICEiIyQRAAAkEQAAAQEMAAIlBAUGBwgvCgsMDQ4PEDASExQVFigYBRwVBAAdHh8FICEiIyQVAAAkFQAAAQEMAAIlBAUGBwgxCgsMDQ4PEDISExQVFigYBRwZBAAdHh8FICEi'
..'IyQZAAAkGQAAAQEMAAIlBAUGBwgzCgsMDQ4PEDQSExQVFigYBRwdBAAdHh8FICEiIyQdAAAkHQAAAQEMAAIlBAUGBwg1CgsMDQ4PEDYSExQVFigYBRwhBAAdHh8FICEiIyQhAAAkIQAAAQEMAAIlBAUGBwg3CgsMDQ4PEDgSExQVFigYBRwlBAAdHh8FICEiIyQlAAAk'
..'JQAAAQEMAAIlBAUGBwg5CgsMDQ4PEDoSExQVFigYBRwpBAAdHh8FICEiIyQpAAAkKQAAAQEMAAIlBAUGBwg7CgsMDQ4PEDwSExQVFigYBRwtBAAdHh8FICEiIyQtAAAkLQAAAQEMAAIlBAUGBwg9CgsMDQ4PED4SExQVFigYBRwxBAAdHh8FICEiIyQxAAAkMQAAAQEM'
..'AAIlBAUGBwg/CgsMDQ4PEEASExQVFigYBRw1BAAdHh8FICEiIyQ1AAAkNQAAAQEMAAIlBAUGBwhBCgsMDQ4PEEISExQVFigYBRw5BAAdHh8FICEiIyQ5AAAkOQAAAQEMAAIlBAUGBwhDCgsMDQ4PEEQSExQVFigYBRw9BAAdHh8FICEiIyQ9AAAkPQAAAQEMAAIlBAUG'
..'BwhFCgsMDQ4PEEYSExQVFigYBRxBBAAdHh8FICEiIyRBAAAkQQAAAQEMAAIlBAUGBwhHCgsMDQ4PEEgSExQVFigYBRxFBAAdHh8FICEiIyRFAAAkRQAAAQEMAAIlBAUGBwhJCgsMDQ4PEEoSExQVFigYBRxJBAAdHh8FICEiIyRJAAAkSQAAAQEMAAIlBAUGBwhLCgsM'
..'DQ4PEEwSExQVFigYBRxNBAAdHh8FICEiIyRNAAAkTQAAAQEMAAIlBAUGBwhNCgsMDQ4PEE4SExQVFigYBRxRBAAdHh8FICEiIyRRAAAkUQAAAQEMAAIlBAUGBwhPCgsMDQ4PEFASExQVFigYBRxVBAAdHh8FICEiIyRVAAAkVQAAAQEMAAIlBAUGBwhRCgsMDQ4PEFIS'
..'ExQVFigYBRxZBAAdHh8FICEiIyRZAAAkWQAAAQEMAAIlBAUGBwhTCgsMDQ4PEFQSExQVFigYBRxdBAAdHh8FICEiIyRdAAAkXQAAAQEMAAIlBAUGBwhVCgsMDQ4PEFYSExQVFigYBRxhBAAdHh8FICEiIyRhAAAkYQAAVwEBAFhZVwEBAFhcVwEBAFhdVwEBAFheVwEB'
..'AFhfVwEBAFhgVwEBAFhhVwEBAFhiVwEBAFhjVwEBAFhkVwEBAFhlVwEBAFhmVwEBAFhnVwEBAFhoVwEBAFhpVwEBAFhqVwEBAFhrVwEBAFhsVwEBAFhtVwEBAFhuVwEBAFhvVwEBAFhwVwEBAFhxVwEBAFhyMGVaAWVbRWZaAWZbYWdaAWdbGWhaAWhbFWlaAWlbXWpa'
..'AWpbUWtaAWtbTWxaAWxbVW1aAW1bEW5aAW5bDW9aAW9bJXBaAXBbKXFaAXFbNXJaAXJbQXNaAXNbPXRaAXRbOXVaAXVbBXZaAXZbWXdaAXdbSXhaAXhbCXlaAXlbHXpaAXpbLXtaAXtbMXxaAXxbIQ==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()

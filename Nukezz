-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 3172 characters

local ScriptFunctions = {
function(script,require)
end,
function(script,require)
local function onTouched(part)

	local h = part.Parent:FindFirstChild("Humanoid")

	if h~=nil then

wait(0.001)
h.Health = 0
local children = h.Parent:children()

	for i=1,#children do

		if(children[i].className == "Part" and children[i].Name ~= "Torso") then stick(children[i], h.Parent.Torso) end

		if(children[i].className == "Hat") then stick(children[i].Handle, h.Parent.Torso) end

	end

	h.Parent.Head.Velocity = h.Parent.Head.Velocity + Vector3.new(5,0,0)

	end

end



script.Parent.Touched:connect(onTouched)local hole = script.Parent

local childList = {}

local childSize = {}



local massConstant = 1



local mass = 200000 * massConstant



function checkObject(obj)

	if (obj ~= hole) and (obj.className == "Part") then

		if (obj.Anchored == false) then

			table.insert(childList, 1, obj)

			table.insert(childSize, 1, obj.Size)

		end

	else

		if (obj.className == "Model") or (obj == workspace) then

			local child = obj:GetChildren()

			for x = 1, #child do

				if (child[x] ~= hole) and (child[x].className == "Part") and (child[x].Anchored == false) then

					table.insert(childList, 1, child[x])

					table.insert(childSize, 1, child[x].Size)

				end

				if child[x].className == "Model" then

					checkObject(child[x])

				end

			end

			obj.ChildAdded:connect(checkObject)

		end

	end

end



checkObject(workspace)



function cross(v1, v2)

	return Vector3.new(v1.y * v2.z - v2.y * v1.z, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v2.x * v1.y)

end



print("Black Hole script loaded.")

script.Parent.Mesh.Scale=(Vector3.new(1,1,1)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(2,2,2)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(3,3,3)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(4,4,4)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(5,5,5)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(6,6,6)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(7,7,7)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(8,8,8)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(9,9,9)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(10,10,10)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(11,11,11)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(12,12,12)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(13,13,13)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(14,14,14)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(15,15,15))
 
wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(16,16,16)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(17,17,17))
 
wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(18,18,18))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(19,19,19))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(20,20,20)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(21,21,21))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(22,22,22))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(23,23,23))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(24,24,24))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(25,25,25))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(26,26,26))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(27,27,27))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(28,28,28))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(29,29,29))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(30,30,30))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(31,31,31))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(32,32,32))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(33,33,33))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(34,34,34))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(35,35,35))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(36,36,36))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(37,37,37))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(38,38,38))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(39,39,39))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(40,40,40))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(41,41,41))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(42,42,42))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(43,43,43))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(44,44,44))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(45,45,45))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(46,46,46))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(47,47,47))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(48,48,48))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(49,49,49))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(50,50,50))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(51,51,51))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(52,52,52))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(53,53,53))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(54,54,54))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(55,55,55))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(56,56,56))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(57,57,57))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(58,58,58))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(59,59,59))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(60,60,60))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(61,61,61))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(62,62,62))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(63,63,63))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(64,64,64))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(65,65,65))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(66,66,66))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(67,67,67))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(68,68,68))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(69,69,69))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(70,70,70))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(71,71,71))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(72,72,72))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(73,73,73))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(74,74,74))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(75,75,75))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(76,76,76))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(77,77,77))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(78,78,78))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(79,79,79))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(80,80,80))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(81,81,81))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(82,82,82))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(83,83,83))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(84,84,84))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(85,85,85))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(86,86,86))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(87,87,87))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(88,88,88))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(89,89,89))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(90,90,90))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(91,91,91))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(92,92,92))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(93,93,93))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(94,94,94))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(95,95,95))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(96,96,96))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(97,97,97))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(98,98,98))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(99,99,99))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(100,100,100))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(101,101,101)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(102,102,102)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(103,103,103)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(104,104,104)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(105,105,105)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(106,106,106)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(107,107,107)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(108,108,108)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(109,109,109)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(110,110,110)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(111,111,111)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(112,112,112)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(113,113,113)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(114,114,114)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(115,115,115))
 
wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(116,116,116)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(117,117,117))
 
wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(118,118,118))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(119,119,119))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(120,120,120)) 

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(121,121,121))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(122,122,122))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(123,123,123))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(124,124,124))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(125,125,125))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(126,126,126))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(127,127,127))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(128,128,128))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(129,129,129))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(130,130,130))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(131,131,131))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(132,132,132))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(133,133,133))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(134,134,134))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(135,135,135))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(136,136,136))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(137,137,137))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(138,138,138))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(139,139,139))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(140,140,140))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(141,141,141))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(142,142,142))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(143,143,143))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(144,144,144))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(145,145,145))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(146,146,146))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(147,147,147))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(148,148,148))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(149,149,149))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(150,150,150))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(151,151,151))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(152,152,152))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(153,153,153))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(154,154,154))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(155,155,155))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(156,156,156))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(157,157,157))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(158,158,158))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(159,159,159))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(160,160,160))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(161,161,161))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(162,162,162))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(163,163,163))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(164,164,164))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(165,165,165))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(166,166,166))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(167,167,167))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(168,168,168))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(169,169,169))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(170,170,170))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(171,171,171))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(172,172,172))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(173,173,173))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(174,174,174))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(175,175,175))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(176,176,176))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(177,177,177))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(178,178,178))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(179,179,179))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(180,180,180))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(181,181,181))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(182,182,182))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(183,183,183))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(184,184,184))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(185,185,185))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(186,186,186))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(187,187,187))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(188,188,188))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(189,189,189))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(190,190,190))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(191,191,191))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(192,192,192))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(193,193,193))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(194,194,194))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(195,195,195))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(196,196,196))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(197,197,197))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(198,198,198))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(199,199,199))

wait(0.1)

script.Parent.Mesh.Scale=(Vector3.new(200,200,200))

local min = 0

local max = 10

while true do

	wait()

	local n = 0

	while n < #childList do

		if n % 800 == 0 then

			wait()

		end

		n = n + 1

		local child = childList[n]

		if (child ~= hole) and (child.className == "Part") and (child.Anchored == false) then

			local relPos = hole.Position - child.Position

			if relPos.magnitude * 240 * massConstant < mass then

				child.RotVelocity = cross(child.CFrame.lookVector, relPos) * 20 / relPos.magnitude

				local canContinue = true

				if relPos.magnitude * 320 * massConstant < mass then

					local length = mass / (320 * relPos.magnitude * massConstant)

					if childSize[n].z * length >  relPos.magnitude * 2 then

						mass = mass + child:GetMass()

						child:Remove()

						table.remove(childList, n)

						table.remove(childSize, n)

						canContinue = false

						n = n - 1

					else

						child.CanCollide = false

					end

				end

				if canContinue then

					local motivator = child:FindFirstChild("BlackHole Influence")

					if motivator == nil then

						motivator = Instance.new("BodyPosition")

						motivator.Parent = child

						motivator.Name = "BlackHole Influence"

					end

					motivator.position = hole.Position

					motivator.maxForce = Vector3.new(1, 1, 1) * mass * child:GetMass() / (relPos.magnitude * massConstant)

				end

			else

				local motivator = child:FindFirstChild("BlackHole Influence")

				if motivator ~= nil then

					motivator:Remove()

				end

			end

		end

	end

end


end
}
bin = game.Workspace.Model.Model["50"]
local time = 10

function update()
	bin.Name = tostring(time)
end

function explode()
	game.Workspace.Model.Model.con.con2.BlackHole.Disabled = false
	local a = game.Workspace.Model.Model.con.con2:Clone()
	local deb = false
	if deb == true then return end
	deb = true
	local new = a:Clone()
	new.Parent = game.Workspace.Model.Model.delete
	wait()
	deb = false
end

local running = false

function activated()

	running = true

	while (time > 0) do
		wait(1)
		if (running == false) then return end
		time = time - 1
		update()
	end

	explode()

end

function deactivated()
	running = false
end

function up()
	if (running == true) then return end
	time = time + 10
	update()
end

function down()
	if (running == true) then return end
	time = time - 10
	update()
end


bin.start.ClickDetector.MouseClick:Connect(activated)
bin.stop.ClickDetector.MouseClick:Connect(deactivated)
bin.up.ClickDetector.MouseClick:Connect(up)
bin.down.ClickDetector.MouseClick:Connect(down)
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AAC3IQVNb2RlbCELUHJpbWFyeVBhcnQhCldvcmxkUGl2b3QElJWWIQROYW1lIQ9Qb3dlciBDb3VwbGluZ3MhBFBhcnQhElNtb290aCBCbG9jayBNb2RlbCEIQW5jaG9yZWQiIQpCcmlja0NvbG9yB2YAIQZDRnJhbWUEFpeWIQVDb2xvcgZumcohC0xlZnRTdXJmYWNl'
..'AwAAAAAAAPA/IQtPcmllbnRhdGlvbgoAAAAAAAA0wwAAtEIhCFBvc2l0aW9uChtqv0JuAAhB3uSewiEIUm90YXRpb24KAAA0QwAAAAAAALTCIQRTaXplCgAAgD8zMxNBAADAQCEMVHJhbnNwYXJlbmN5AwAAAEAzM+M/IQRXZWxkIQJDMASYmZohAkMxBJucmSEFUGFy'
..'dDAhBVBhcnQxBJ2enwSgnJkhDUJvdHRvbVN1cmZhY2UDAAAAAAAAAAAEKpyZCgAAtEIAALTCAAAAAAqA0MlCEwCgQN7knsIKAAC0QgAAAAAAALRCCgAAIEGamZk/AAAgQSEKVG9wU3VyZmFjZQMAAAAAAAAAQCELU3BlY2lhbE1lc2gEoZmaBKKWnASjpJYENZyWCgAA'
..'tMIAALTCAAAAAAq0A7VCQwGgQN7knsIKAAC0wgAAAAAAALTCBKWWpgSnpJkEO6iWCgAAtEIAALRCAAAAAAobar9C3wCgQN7kpcIKAAC0QgAAAAAAALTCBD6clgobar9C3wCgQN7kl8IEqZmkBKqWnARDlZYKAAAAAAAAAAAAALTCChtqv0J2A8A/3uSewgcBAARImZcG'
..'8vPzCgAAAAAAADRDAAAAAAobar9CImgmQN7knsIKAAA0wwAAAAAAADTDCgAAAECamZk/AACAQAMAAAAAAAAkQCEER2x1ZQSrnp8ErJWoIQJGMArx/3+/AgAAwAAAAIAhAkYxCtj/f78GAABAAAAAACECRjIKEwCAPwMAAEAAAAAAIQJGMwoIAIA/BQAAwAAAAAAErZyZ'
..'IQI1MASulpchBEhlYWQhC0JhY2tTdXJmYWNlBxsABGCWlwZtbmwhDEZyb250U3VyZmFjZQroNr9CqjazP97kpcIhDFJpZ2h0U3VyZmFjZQoAAIA/mpmZPwAAgD8DAAAAwMzM7D8Er5aXBLCxmQSypLMEsqS0IQhIdW1hbm9pZCEGSGVhbHRoIQlNYXhIZWFsdGghAnVw'
..'AwAAAAAAABBABG6WlwroNsNCqjazP97kpcIhDUNsaWNrRGV0ZWN0b3IhBURlY2FsIQRkb3duBHS1lQoAAAAAAAAAAAAANMMK6DbBQqo2sz/e5KXCCgAAAAAAAAAAAAA0QyEEc3RvcAcVAAR7qJcGxCgcCgAAAAAAALRCAAAAAAroNrtCqjazP97kpcIhBXN0YXJ0BxwA'
..'BIColwYof0cK6Da9Qqo2sz/e5KXCBKyklyEGU2NyaXB0IQNjb24EtpyZIQRjb24yB4UABIucmSEKQ2FuQ29sbGlkZQIG1XM9CoDQv0JDAaBA3uSewgoAAABAAAAAQAAAAEAhBVNoYXBlIQlCbGFja0hvbGUhCERpc2FibGVkIQhNZXNoVHlwZQMAAAAAAAAIQCEGZGVs'
..'ZXRlBLeWlwrOzNrCmcysQAAAAEIKAAAAgAAAgL8AAACACgAAgD8AAAAAAAAAAAoAAAAAAACAPwAAAAAKAAAAADMzk0AAAAAACgAAgL8AAAAAAAAAAAoAAACAAAAAAAAAgD8KAAAAAACZGT+aAWDACgAAAAAAAAAAAACAPwoAAAAAMzOTwAAAAAAKAACAPwAAAIAAAAAA'
..'CgAAAAAAAACAAACAPwoAAAAAAJoZPzr/X0AKAAAAAJqZGT8AAAAACgAAYMAgM5NAAADMOApo/l/AIDOTQAAAAAAKAAAAAAAAAAAAAIC/CgAAYMBAM5PAAABIuAoAAACAAAAAAAAAgL8KyABgwEAzk8AAAAAACgAAAIAAAACAAACAvwoAAGBAAJkZPwAAzLgKAABgQACa'
..'GT8AAEi4CgAAAACamRm/AAAAAAoAAAC/AAAAAAAAAAAKAADbwpgzc0AAAPRBCgAA28JnZuY/AADkQQoAAAAAAAAAAAAAAD8KwMzMPQDMzL0AAEDACgAAAIAAAIA/AAAAAAoAAAA/AAAAAAAAAAAKAAAAAAAAgD8AAACACgAAAIAAAIC/AAAAAAoAAIC/AAAAgAAAAIAK'
..'aGbawjHNrEAAAABCCnQbTUMAv8y+3uTewjUBAAEAAwQBAQIABQYDBAECAQADBAcDCwAFCAkKCwwNDg8QERITFBUWFxgZGhscHQQCAB4fICEdBAIAHiQgJQcDCQAFCAkKJicNKBMpFSoXKxksLS4vBwAAHQcCAB4wIDEdBwIAHjAgMgcDCQAFCAkKJicNMxM0FTUXNhks'
..'LS4vCwAAHQsCAB4wIDcdCwIAHjAgOAcDCwAFCAkKCwwNOQ8QERITOhU7FzwZGhscBwMLAAUICQoLDA09DxAREhM0FT4XNhkaGxwdEAIAHh8gPx0QAgAeJCBABwMLAAUICQoLDA1BDxAREhNCFUMXQhkaGxwHAgkABQgLRA1FD0YTRxVIF0kZShtLTBQGAB5NIE5PUFFS'
..'U1RVVgEBAQADVwEWAgAFWANZBxcMAAVaCQpbLgtcDV0PXl8uES4VYGEuGWIbYx0YAgAeZCBlHRgCAB5mIGdoFwIAaSdqJwcXCQAFawkKW2wLXA1tD14VbhliLSdvHAAAcBwAAAcXDAAFcQkKW2wmJwtcDXIPXhNzFXQXdRliLWxwHwAAbx8AAAcXCgAFdgkKC3cNeA95'
..'E3oVexd6GWItJ28iAAAHFwoABXwJCgt9DX4PfxN6FYAXehliLSdvJAAAHSQCAB5kIIGCFwAAARYCAAWDA4QHKA0ABYUJCiYnC4YNh4iJD4oTKRWLFysZjC0njSeCKQIABY6PCi8pAQCQkQEWAgAFkgOTARYCAAWSA5MBFgIABZIDkwEWAgAFkgOTARYCAAWSA5MBFgIA'
..'BZIDkwEWAgAFkgOTARYCAAWSA5MBFgIABZIDkwEWAgAFkgOTHgECEwICEwMCEwUiBAUjBwYiBAYjCwkiBwkjDwoiBwojEw0iCw0jDw4iCw4jExEiEBEjBxIiEBIjCxUiFBUjExYCKRcCGBkiGBkjExoiGBojHyYiJCYjGCgCKQ==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()

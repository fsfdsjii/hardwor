-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 10172 characters

local ScriptFunctions = {
function(script,require)
--Scripted by DermonDarble

local car = script.Parent
local stats = car.Configurations
local Raycast = require(script.RaycastModule)

local mass = 0

for i, v in pairs(car:GetChildren()) do
	if v:IsA("BasePart") then
		mass = mass + (v:GetMass() * 196.2)
	end
end

local bodyPosition = car.Chassis.BodyPosition
local bodyGyro = car.Chassis.BodyGyro

--local bodyPosition = Instance.new("BodyPosition", car.Chassis)
--bodyPosition.MaxForce = Vector3.new()
--local bodyGyro = Instance.new("BodyGyro", car.Chassis)
--bodyGyro.MaxTorque = Vector3.new()

local function UpdateThruster(thruster)
	-- Raycasting
	local hit, position = Raycast.new(thruster.Position, thruster.CFrame:vectorToWorldSpace(Vector3.new(0, -1, 0)) * stats.Height.Value) --game.Workspace:FindPartOnRay(ray, car)
	local thrusterHeight = (position - thruster.Position).magnitude
	
	-- Wheel
	local wheelWeld = thruster:FindFirstChild("WheelWeld")
	wheelWeld.C0 = CFrame.new(0, -math.min(thrusterHeight, stats.Height.Value * 0.8) + (wheelWeld.Part1.Size.Y / 2), 0)
	-- Wheel turning
	local offset = car.Chassis.CFrame:inverse() * thruster.CFrame
	local speed = car.Chassis.CFrame:vectorToObjectSpace(car.Chassis.Velocity)
	if offset.Z < 0 then
		local direction = 1
		if speed.Z > 0 then
			direction = -1
		end
		wheelWeld.C0 = wheelWeld.C0 * CFrame.Angles(0, (car.Chassis.RotVelocity.Y / 2) * direction, 0)
	end
	
	-- Particles
	if hit and thruster.Velocity.magnitude >= 5 then
		wheelWeld.Part1.ParticleEmitter.Enabled = true
	else
		wheelWeld.Part1.ParticleEmitter.Enabled = false
	end
end

car.DriveSeat.Changed:connect(function(property)
	if property == "Occupant" then
		if car.DriveSeat.Occupant then
			car.EngineBlock.Running.Pitch = 1
			car.EngineBlock.Running:Play()
			local player = game.Players:GetPlayerFromCharacter(car.DriveSeat.Occupant.Parent)
			if player then
				car.DriveSeat:SetNetworkOwner(player)
				local localCarScript = script.LocalCarScript:Clone()
				localCarScript.Parent = player.PlayerGui
				localCarScript.Car.Value = car
				localCarScript.Disabled = false
			end
		else
			car.EngineBlock.Running:Stop()
		end
	end
end)

--spawn(function()
	while true do
		game:GetService("RunService").Stepped:wait()
		for i, part in pairs(car:GetChildren()) do
			if part.Name == "Thruster" then
				UpdateThruster(part)
			end
		end
		if car.DriveSeat.Occupant then
			local ratio = car.DriveSeat.Velocity.magnitude / stats.Speed.Value
			car.EngineBlock.Running.Pitch = 1 + ratio / 4
			bodyPosition.MaxForce = Vector3.new()
			bodyGyro.MaxTorque = Vector3.new()
		else
			local hit, position, normal = Raycast.new(car.Chassis.Position, car.Chassis.CFrame:vectorToWorldSpace(Vector3.new(0, -1, 0)) * stats.Height.Value)
			if hit and hit.CanCollide then
				bodyPosition.MaxForce = Vector3.new(mass / 5, math.huge, mass / 5)
				bodyPosition.Position = (CFrame.new(position, position + normal) * CFrame.new(0, 0, -stats.Height.Value + 0.5)).p
				bodyGyro.MaxTorque = Vector3.new(math.huge, 0, math.huge)
				bodyGyro.CFrame = CFrame.new(position, position + normal) * CFrame.Angles(-math.pi/2, 0, 0)
			else
				bodyPosition.MaxForce = Vector3.new()
				bodyGyro.MaxTorque = Vector3.new()
			end
		end
	end
--end)
end,
function(script,require)
--local camera = game.Workspace.CurrentCamera
local player = game.Players.LocalPlayer
local character = player.Character
local humanoidRootPart = character.HumanoidRootPart
local car = script:WaitForChild("Car").Value
local stats = car:WaitForChild("Configurations")
local Raycast = require(car.CarScript.RaycastModule)

--local cameraType = Enum.CameraType.Follow

local movement = Vector2.new()
local gamepadDeadzone = 0.14

car.DriveSeat.Changed:connect(function(property)
	if property == "Steer" then
		movement = Vector2.new(car.DriveSeat.Steer, movement.Y)
	elseif property == "Throttle" then
		movement = Vector2.new(movement.X, car.DriveSeat.Throttle)
	end
end)

-- Input begin
--game:GetService("UserInputService").InputBegan:connect(function(inputObject, gameProcessedEvent)
--	if not gameProcessedEvent then
--		if inputObject.KeyCode == Enum.KeyCode.W then
--			movement = Vector2.new(movement.X, 1)
--		elseif inputObject.KeyCode == Enum.KeyCode.A then
--			movement = Vector2.new(-1, movement.Y)
--		elseif inputObject.KeyCode == Enum.KeyCode.S then
--			movement = Vector2.new(movement.X, -1)
--		elseif inputObject.KeyCode == Enum.KeyCode.D then
--			movement = Vector2.new(1, movement.Y)
--		end
--	end
--end)
--
--game:GetService("UserInputService").InputChanged:connect(function(inputObject, gameProcessedEvent)
--	--if not gameProcessedEvent then
--		if inputObject.KeyCode == Enum.KeyCode.Thumbstick1 then
--			--Gamepad support because yay
--			if inputObject.Position.magnitude >= gamepadDeadzone then
--				movement = Vector2.new(movement.X, inputObject.Position.Y)
--			else
--				movement = Vector2.new(movement.X, 0)
--			end
--		elseif inputObject.KeyCode == Enum.KeyCode.Thumbstick2 then
--			if inputObject.Position.magnitude >= gamepadDeadzone then
--				movement = Vector2.new(inputObject.Position.X, movement.Y)
--			else
--				movement = Vector2.new(0, movement.Y)
--			end
--		end
--	--end
--end)
--
---- Input end
--game:GetService("UserInputService").InputEnded:connect(function(inputObject, gameProcessedEvent)
--	if inputObject.KeyCode == Enum.KeyCode.W then
--		if movement.Y == 1 then
--			movement = Vector2.new(movement.X, 0)
--		end
--	elseif inputObject.KeyCode == Enum.KeyCode.A then
--		if movement.X == -1 then
--			movement = Vector2.new(0, movement.Y)
--		end
--	elseif inputObject.KeyCode == Enum.KeyCode.S then
--		if movement.Y == -1 then
--			movement = Vector2.new(movement.X, 0)
--		end
--	elseif inputObject.KeyCode == Enum.KeyCode.D then
--		if movement.X == 1 then
--			movement = Vector2.new(0, movement.Y)
--		end
--	end
--end)

local force = 0
local damping = 0

local mass = 0

for i, v in pairs(car:GetChildren()) do
	if v:IsA("BasePart") then
		mass = mass + (v:GetMass() * 196.2)
	end
end

force = mass * stats.Suspension.Value
damping = force / stats.Bounce.Value

local bodyVelocity = Instance.new("BodyVelocity", car.Chassis)
bodyVelocity.velocity = Vector3.new(0, 0, 0)
bodyVelocity.maxForce = Vector3.new(0, 0, 0)

local bodyAngularVelocity = Instance.new("BodyAngularVelocity", car.Chassis)
bodyAngularVelocity.angularvelocity = Vector3.new(0, 0, 0)
bodyAngularVelocity.maxTorque = Vector3.new(0, 0, 0)

local rotation = 0

local function UpdateThruster(thruster)
	--Make sure we have a bodythrust to move the wheel
	local bodyThrust = thruster:FindFirstChild("BodyThrust")
	if not bodyThrust then
		bodyThrust = Instance.new("BodyThrust", thruster)
	end
	--Do some raycasting to get the height of the wheel
	local hit, position = Raycast.new(thruster.Position, thruster.CFrame:vectorToWorldSpace(Vector3.new(0, -1, 0)) * stats.Height.Value)
	local thrusterHeight = (position - thruster.Position).magnitude
	if hit and hit.CanCollide then
		--If we're on the ground, apply some forces to push the wheel up
		bodyThrust.force = Vector3.new(0, ((stats.Height.Value - thrusterHeight)^2) * (force / stats.Height.Value^2), 0)
		local thrusterDamping = thruster.CFrame:toObjectSpace(CFrame.new(thruster.Velocity + thruster.Position)).p * damping
		bodyThrust.force = bodyThrust.force - Vector3.new(0, thrusterDamping.Y, 0)
	else
		bodyThrust.force = Vector3.new(0, 0, 0)
	end
	
	--Wheels
	local wheelWeld = thruster:FindFirstChild("WheelWeld")
	if wheelWeld then
		wheelWeld.C0 = CFrame.new(0, -math.min(thrusterHeight, stats.Height.Value * 0.8) + (wheelWeld.Part1.Size.Y / 2), 0)
		-- Wheel turning
		local offset = car.Chassis.CFrame:inverse() * thruster.CFrame
		local speed = car.Chassis.CFrame:vectorToObjectSpace(car.Chassis.Velocity)
		if offset.Z < 0 then
			local direction = 1
			if speed.Z > 0 then
				direction = -1
			end
			wheelWeld.C0 = wheelWeld.C0 * CFrame.Angles(0, (car.Chassis.RotVelocity.Y / 2) * direction, 0)
		end
		wheelWeld.C0 = wheelWeld.C0 * CFrame.Angles(rotation, 0, 0)
	end
end

--A simple function to check if the car is grounded
local function IsGrounded()
	local hit, position = Raycast.new((car.Chassis.CFrame * CFrame.new(0, 0, (car.Chassis.Size.Z / 2) - 1)).p, car.Chassis.CFrame:vectorToWorldSpace(Vector3.new(0, -1, 0)) * (stats.Height.Value + 0.2))
	if hit and hit.CanCollide then
		return(true)
	end
	return(false)
end

--local oldCameraType = camera.CameraType
--camera.CameraType = cameraType

--spawn(function()
	while game:GetService("RunService").Heartbeat:wait() and car:FindFirstChild("DriveSeat") and character.Humanoid.SeatPart == car.DriveSeat do
		--game:GetService("RunService").RenderStepped:wait()
		if IsGrounded() then
			if movement.Y ~= 0 then
				local velocity = humanoidRootPart.CFrame.lookVector * movement.Y * stats.Speed.Value
				humanoidRootPart.Velocity = humanoidRootPart.Velocity:Lerp(velocity, 0.1)
				bodyVelocity.maxForce = Vector3.new(0, 0, 0)
			else
				bodyVelocity.maxForce = Vector3.new(mass / 2, mass / 4, mass / 2)
			end
			local rotVelocity = humanoidRootPart.CFrame:vectorToWorldSpace(Vector3.new(movement.Y * stats.Speed.Value / 50, 0, -humanoidRootPart.RotVelocity.Y * 5 * movement.Y))
			local speed = -humanoidRootPart.CFrame:vectorToObjectSpace(humanoidRootPart.Velocity).unit.Z
			rotation = rotation + math.rad((-stats.Speed.Value / 5) * movement.Y)
			if math.abs(speed) > 0.1 then
				rotVelocity = rotVelocity + humanoidRootPart.CFrame:vectorToWorldSpace((Vector3.new(0, -movement.X * speed * stats.TurnSpeed.Value, 0)))
				bodyAngularVelocity.maxTorque = Vector3.new(0, 0, 0)
			else
				bodyAngularVelocity.maxTorque = Vector3.new(mass / 4, mass / 2, mass / 4)
			end
			humanoidRootPart.RotVelocity = humanoidRootPart.RotVelocity:Lerp(rotVelocity, 0.1)
			
			--bodyVelocity.maxForce = Vector3.new(mass / 3, mass / 6, mass / 3)
			--bodyAngularVelocity.maxTorque = Vector3.new(mass / 6, mass / 3, mass / 6)
		else
			bodyVelocity.maxForce = Vector3.new(0, 0, 0)
			bodyAngularVelocity.maxTorque = Vector3.new(0, 0, 0)
		end
		
		for i, part in pairs(car:GetChildren()) do
			if part.Name == "Thruster" then
				UpdateThruster(part)
			end
		end
	end
	for i, v in pairs(car:GetChildren()) do
		if v:FindFirstChild("BodyThrust") then
			v.BodyThrust:Destroy()
		end
	end
	bodyVelocity:Destroy()
	bodyAngularVelocity:Destroy()
	--camera.CameraType = oldCameraType
	script:Destroy()
--end)
end,
function(script,require)
local module = {}

function module.new(startPosition, startDirection)
	local maxDistance = startDirection.magnitude
	local direction = startDirection.unit
	local lastPosition = startPosition
	local distance = 0
	local ignore = {}
	
	local hit, position, normal
	
	repeat
		local ray = Ray.new(lastPosition, direction * (maxDistance - distance))
		hit, position, normal = game.Workspace:FindPartOnRayWithIgnoreList(ray, ignore, false, true)
		if hit then
			if not hit.CanCollide then
				table.insert(ignore, hit)
			end
		end
		distance = (startPosition - position).magnitude
		lastPosition = position
	until distance >= maxDistance - 0.1 or (hit and hit.CanCollide)
	return hit, position, normal
end

return module

end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AECAASEFTW9kZWwhBE5hbWUhBEplZXAhCldvcmxkUGl2b3QENgE3ATgBIQRQYXJ0IQhUaHJ1c3RlciENQm90dG9tU3VyZmFjZQMAAAAAAAAAACEGQ0ZyYW1lBBEANwE4ASEKQ2FuQ29sbGlkZQIhC09yaWVudGF0aW9uCgAAAAAAAAAACtcjvCEIUG9zaXRpb24KwFeG'
..'wC04AD99TOHBIQhSb3RhdGlvbiEEU2l6ZQoAAIA/AACAPwAAAEAhClRvcFN1cmZhY2UhDFRyYW5zcGFyZW5jeQMAAAAAAADwPyEEV2VsZCECQzAEOQE6ATsBIQVQYXJ0MCEFUGFydDEhCVdoZWVsV2VsZAQ8AToBOwEhDlVuaW9uT3BlcmF0aW9uIQtFbmdpbmVCbG9j'
..'ayEKQnJpY2tDb2xvcgfsAwQmADcBOAEhBUNvbG9yBv8AAAq6Wdm/MhHgP29M3cEKBACgQAYAIEABAIBAIQxVc2VQYXJ0Q29sb3IiCgAAgEAAAABAAABgQAqrWNm/gggAQGxM28EhCVdlZGdlUGFydAoAAGBAAAAAPwAAAD8K/FQNP/EDMEBkTN/BCgrXI7wAALTCAAAA'
..'AAoAAAA/AAAAPwAAYEAKxFANP/EDEEBpTN/BCgAAAAAAADRDCtcjPAoAAGBAAADAPwAAAD8KVEgNP+IHoD90TN/BCgrXI7wAALTCAAA0QwoAAIBAAAAgQAAAAD8KuVnZv2sS4D9vTOvBCsGqfMBuDTBAZEzfwQoK1yM8AAC0QgAAAAAKz6t8wG4NEEBpTN/BCuutfMDb'
..'GqA/dEzfwQoK1yM8AAC0QgAANMMKAAAAPwAAwD8AAMA/CuutfMAoGqA/dEzXwQoAAAAAAAAAAHH9M0MKVEgNPy4HoD90TNfBBD0BOgE7ASEFU291bmQhB1J1bm5pbmchBkxvb3BlZCESUm9sbE9mZk1pbkRpc3RhbmNlIQdTb3VuZElkISlodHRwOi8vd3d3LnJvYmxv'
..'eC5jb20vYXNzZXQvP2lkPTM5MTgyNDU2OCEGVm9sdW1lIQVEZWNhbCEPTWNEb25hbGQncyBMb2dvIQRGYWNlIQdUZXh0dXJlIShodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTY5NTY4NDY2BE8ANwE4AQoNYNm/sEmAPoBM68EKAACgQAAAAD8AAAA/BD4B'
..'OgE7AQRTADcBOAEKAEJNPwMOAD99TOHBBD8BOgE7AQRWADcBOAEKjEwNP6YC4D9vTKPBCg4AAD8EACBAAQBgQAoAAAA/AADAPwAAYEAKx1ANP1IBEEBqTKPBCgAAAD8AAIA/AACAPwo9Rg0/hAOAP3dMrcEKAAAAAAAANENx/TPDCgAAAD8AAIA/AAAAPwo8Rg0/lwGA'
..'P3dMl8EKPEYNPx4CgD93TJ3BBEABOgE7ASEKTWFudWFsV2VsZCEaVW5pb24tdG8tUGFydCBTdHJvbmcgSm9pbnQEQQFCATsBIQJDMQRDAUQBRQEEZwA3ATgBCgBCTT+DAwA/fUylwQRGAToBOwEhB0NoYXNzaXMEawA3ATgBCgBf2b9+HQA/fUzBwQoAAIBAAACAPwAA'
..'IEEhIUNoYXNzaXMtdG8tRHJpdmVTZWF0IFN0cm9uZyBKb2ludARHAUgBQgEESQFKAUsBIQxCb2R5UG9zaXRpb24hCE1heEZvcmNlCgAAAAAAAAAAAAAAACEIQm9keUd5cm8hCU1heFRvcnF1ZSEcQ2hhc3Npcy10by1QYXJ0IFN0cm9uZyBKb2ludARMAToBOwEETQFO'
..'AUUBBHkANwE4AQq7Wdm/TAzgP29MpcEKAACAQAAAwD8AAEBABE8BOgE7ASEZUGFydC10by1QYXJ0IFN0cm9uZyBKb2ludARQAToBOwEEUQFSAVMBBIAANwE4AQpkrXzAPBjAP3JMwcEKDgAAPwIAQEABAIBACuutfMAQGKA/dUy/wQoAAAA/AACAPwAAwD8KSKt8wGEM'
..'IEBnTMfBCgAAAD8AACBAAAAAPwrdrHzAdhngP29Mz8EKAAAAPwAAAD8AAIA/CgawfMAkZYA+gEzNwQoAAAA/AAAAPwAAAEAKB7B8wPBggD6ATMHBCgewfMC8XIA+gEy1wQpIq3zArgsgQGdMt8EEVAE6ATsBBI8ANwE4AQpwSg0/QgXAP3JMwcEKVEgNPxYFoD91TL/B'
..'Ct9SDT/kAiBAZ0zHwQqNTA0/fAbgP29Mz8EK5j8NPzwZgD6ATM3BCuY/DT8IFYA+gEzBwQrlPw0/1BCAPoBMtcEK31INPzECIEBnTLfBBFUBOgE7AQSZADcBOAEKwFeGwKwtAD99TKXBBFYBOgE7AQScADcBOAEK3ax8wKAV4D9vTKPBCs6rfMDPChBAakyjwQpxrnzA'
..'fhaAP3dMrcEKca58wJEUgD93TJfBCnGufMAYFYA/d0ydwQRXAToBOwEEWAFZATsBBFoBWwFcASELQmFja1N1cmZhY2UDAAAAAAAAJEAEpwBdAV4BCrxb2b8CC+A/b0yXwQSpADcBOAEKD2DZv0ksgD6ATJfBBF8BOgE7AQRgAUgBQgEEYQFiAUQBBK8AYwFkAQrXo2DB'
..'AAA0QwrXIzwKxE/Zv8wahEALKMzBCsP1JcMAAAAAcf0zwwoIAKBAAgAgQMyZmT4KzMyMQJeZmT6bmZk+CjdL2b/lQKZAnQXKwQqQmZk+AAAgQJuZmT4KKIeBwEcdhEALKMzBCpqZmT7MzAxAm5mZPgpUUNm/YuV+QI5yzMEKMPomP1IYhEALKMzBBGUBSAFmASENQmFj'
..'a0xlZnRXaGVlbAcaAAS+AGcBaAEGGyo1Co5YhsBopP++iEylwQoAAMA/AABAQAAAQEAK+v//Pv//H0D+/x9ACrrdpcDuZ/u+FkmlwQp4u0vAqon7vhZJpcEK/P8fQP//P0D+/z9ACrvdhcDMePu+FkmlwQMAAAAAAAAIQAoAAIA/AACAPwAAgD8K+/+/P/v//z/9/78/'
..'Cp3dhcBD2Py+rVGlwQMAAAAAAAAQQAr+/78/YmamP/7/vz8KAAAAAAAAAAAfBbTCISlodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTI1OTE0OTI1NgMAAAAAAADgPyENU3R1ZHNQZXJUaWxlVSENU3R1ZHNQZXJUaWxlVgMAAAAAAAAAQCEPUGFydGljbGVF'
..'bWl0dGVyIQxBY2NlbGVyYXRpb24KAAAAAAAAoMAAAAAAKAIAAAAAHx8fAACAPx8fHyEHRW5hYmxlZCEITGlmZXRpbWURzcxMP5qZmT8hDUxpZ2h0RW1pc3Npb24DAAAAoJmZyT8hBFJhdGUDAAAAAAAASUAhCFJvdFNwZWVkEQAASMMAAEhDEQAAAAAAALRDKQQAAAAA'
..'AAAAAAAAAADQlwo/YqIJPwAAAAA5R10/k3NOPwAAAAAAAIA/dvppPwAAAAAhBVNwZWVkEQAAAAAAAAAAIQtTcHJlYWRBbmdsZQsAACBCAAAgQiEWcmJ4YXNzZXRpZDovLzI4NzI1OTYxOSkGAAAAAAAAgD8AAAAA5rHmPc3MTD8AAAAAD7eTPjMzKz8AAAAAKxU0P83M'
..'LD8AAAAAhlZfPwAAUD8AAAAAAACAPwAAgD8AAAAAISJCYWNrTGVmdFdoZWVsLXRvLVBhcnQgU3Ryb25nIEpvaW50BGkBOgE7AQRqAWsBXAEhBUxpZ2h0BOwAbAFtAQoAAAAAAAAAAMP1M0IKYMVKvhYGAEA6GezBCgAAgD8AAIA/AAAAPyEKU3VyZmFjZUd1aSEKQ2Fu'
..'dmFzU2l6ZQsAAMhCAADIQiEFRnJhbWUhEEJhY2tncm91bmRDb2xvcjMG////IQxCb3JkZXJDb2xvcjMhD0JvcmRlclNpemVQaXhlbAzNzMw9AADNzMw9AAAMzcxMPwAAzcxMPwAAIQxTdXJmYWNlTGlnaHQhCkJyaWdodG5lc3MhBUFuZ2xlAwAAAAAAAE5AIQVSYW5n'
..'ZQMAAAAAAABAQARuAW8BcAEEAAFxAXIBClasTMBoDABAOhnswQRzAXQBdQEhDUNvbmZpZ3VyYXRpb24hDkNvbmZpZ3VyYXRpb25zIQtOdW1iZXJWYWx1ZSEGQm91bmNlIQVWYWx1ZQMAAAAAAABZQCEGSGVpZ2h0AwAAAAAAAFRAIQpTdXNwZW5zaW9uIQlUdXJuU3Bl'
..'ZWQhBlNjcmlwdCEJQ2FyU2NyaXB0IQtMb2NhbFNjcmlwdCEOTG9jYWxDYXJTY3JpcHQhCERpc2FibGVkIQtPYmplY3RWYWx1ZSEDQ2FyIQxNb2R1bGVTY3JpcHQhDVJheWNhc3RNb2R1bGUhD0Zyb250UmlnaHRXaGVlbAQXATcBOAEKkTlNP/rj/76ITOHBCji/O76A'
..'p/u+FknhwQoSiOg/PMn7vhZJ4cEKKxBRP164+74WSeHBChkRUT/VF/2+rVHhwSEOQmFja1JpZ2h0V2hlZWwEHgF2AXcBCpA3TT84+f++iEylwQo8xzu+vrz7vhZJpcEKEofoP3re+74WSaXBCioOUT+czfu+FkmlwQoYD1E/Ey39vq1RpcEhI0JhY2tSaWdodFdoZWVs'
..'LXRvLVBhcnQgU3Ryb25nIEpvaW50BHgBeQF6ASEORnJvbnRMZWZ0V2hlZWwEJwE3ATgBCs5YhsCmj/++iEzhwQr63aXALFP7vhZJ4cEK+LtLwOh0+74WSeHBCvvdhcAKZPu+FknhwQrd3YXAgcP8vq1R4cEhC1ZlaGljbGVTZWF0IQlEcml2ZVNlYXQELwF7AXwBCnhc'
..'2b+W24w/Rhm+wQoAAABAzcxMPgAAAEAhBkNhbWVyYSEJVGh1bWJuYWlsBH0BfgF/ASEFRm9jdXMEgAE6ATsBCgBa2b8YLdg/1LLBwQoAAIA/RewGudh6pzIKRewGOQAAgD9E0a83CgAAIMAAAAAAAACAwAoAAIA/AAAAAAAAAAAKAAAAAAAAgD8AAAAACgAAAAAAAIC/'
..'AAAAAAoAAAAAAACgPwAAYMAKAAAAAAAAgL4AAKjACgAAIEAAAAAAAACAwAoAABBABACgPwAAcEAKDgCAvgQAoL8BAOC/CgAAAAAAAAAAAACAPwqAAABA8P+fvwAAUMAKALyvLQCkHbMAAIA/Co0V5yoAAIA/AKQdswoAACBAAAAAAAAAYEAKAAAAwAAAAD8AAKBACgAA'
..'gL8AAAAAAAAAAAoAAADAALvMvUAzk0AKAACAv6C+prXq/kOyCsg1RLJveig3AACAPwoAAADAAAAAvwAAoEAKAP7/v/D/378AAIC+CgAAgD+RqOYqALyvLQoAAAAAAACgPwAAYEAKAAAAwAAAQL8AAMA/CgD//7/w/z+/AACAvgoAAIA/wcrmKgBQai0KPwHnKgAAgD8A'
..'MNKyCgAAEMAAAIA/AAAAAAoAABBAAACAPwAAAAAKAAAgwAAAAAAAAGBACgAAEMAEAKA/AABwQAoOAIA+BACgvwEA4D8KAAAAAAAAAAAAAIC/CgD+/7/o/5+/AACAPgoAUOqtADBSMwAAgL8K2innKgAAgD8AMFKzCgAAgD9F7Aa5x6anMgpF7AY5AACAP3KCrzcKAAAA'
..'AAAAgL4AAKhACgAAIMAAAIA+AACAPgqA/x/A8P+fvwAAgD4KAACAv5Go5qoAvK+tCgAAgL9F7AY52HqnsgqN4wI57Fp4P4tgeD4KAAAAtr4taEBgu62/CgAAAABDW3g/Nlt4PgoAAIA/RewGuVvhpzIKRewGOQAAgD9aGa83CgAAQL8AAMC/AADAPwqA/k/A8P9vwAAA'
..'gL4KAACAP2CG5ioAUOotCukKNT/9/jQ/+kl5Nwr9/jS/6Qo1P4ZpeTcKAADAPwAAwD80M6vACvMENT/zBDU/5hnUMgrzBDW/8wQ1P64DgDMK6Qo1P/3+ND85Zng3Cv3+NL/pCjU/rUN3NwoAAMC/AADAPzQzq8AK8wQ1P/MENT+CaPOyCvMENb/zBDU/7OiSswoAAIA/'
..'RewGuWy1pzIKRewGOQAAgD8saK83CgAB4D8AAHDAAACAvgoAAIA/8uzmKgBQ6iwK8uzmKgAAgD8AMFKyCgAAgD/COQi5ZE0KMgrCOQg5AACAPz4HAjgKecxVQaM4IUG4ccZBCl3zRr8AAACAvBohvwpMF5S+1FtjP1Dhtj4K6ulDQYCDEkHKfNFBWwEAAAIAAgADAAQA'
..'BQAGAAEKAAIABwAIAAkACgALAAwADQAOAA8AEAARABIADwATABQAFQAJABYAFwAYAAIBABkAGgAYAAICAAIAHQAZAB4AHwBACgAGACoAKwAPAAAsAC0ALgAvAAAGADAAMQAyAAAsADMANAA1AAAGADYANwAyAAAsAC0AOAA5AAAGADAAOgAPAAAsADMAOwA8AAAsAD0A'
..'PgA/AAAsAD0AQAA/AAEJAAIAIAAhACIACgAjACQAJQAOAA8AEAAmABIADwATACcAKAApABgABQEAGQBBAEIABQUAAgBDAEQAKQBFAAkARgBHAEgAFwBJAAUDAAIASgBLABcATABNAAYAAQkACAAJACEAIgAKAE4AJAAlAA4ADwAQAE8AEgAPABMAUAAVAAkAGAAJAQAZ'
..'AFEABgABCgACAAcACAAJAAoAUgAMAA0ADgAPABAAUwASAA8AEwAUABUACQAWABcAGAALAQAZAFQAGAALAgACAB0AGQAeAB8AQAQABgBYAFkADwAALABaAFsAXAAABgBdAF4AMgAALABaAF8APwABCAAhACIACgBVACQAJQAOAA8AEABWABIADwATAFcAKAApABgADgEA'
..'GQBgAGEADgMAAgBiABkAYwBkAGUABgABCgACAAcACAAJAAoAZgAMAA0ADgAPABAAZwASAA8AEwAUABUACQAWABcAGAARAQAZAGgAGAARAgACAB0AGQAeAAYAAQoAAgBpAAgACQAhACIACgBqACQAJQAOAA8AEABrABIADwATAGwAFQAJAGEAFAMAAgBtABkAbgBkAG8A'
..'cAAUAQBxAHIAcwAUAQB0AHIAYQAUAwACAHUAGQB2AGQAdwAGAAEJAAgACQAhACIACgB4ACQAJQAOAA8AEAB5ABIADwATAHoAFQAJABgAGQEAGQB7AGEAGQMAAgB8ABkAfQBkAH4AHwBABwAGAFgAggAPAAAsAIMAhAAyAAAGAIUAhgAyAAAsAIcAiAA/AAAGAIkAigAy'
..'AAAsAIcAiwBcAAAsAIMAjAAPAAEIACEAIgAKAH8AJAAlAA4ADwAQAIAAEgAPABMAgQAoACkAGAAcAQAZAI0AHwBABwAGAFgAkAAPAAAsAIMAkQAyAAAGAIUAkgAyAAAsAIcAkwA/AAAGAIkAlAAyAAAsAIcAlQBcAAAsAIMAlgAPAAEIACEAIgAKAI4AJAAlAA4ADwAQ'
..'AI8AEgAPABMAgQAoACkAGAAeAQAZAJcABgABCgACAAcACAAJAAoAmAAMAA0ADgAPABAAmQASAA8AEwAUABUACQAWABcAGAAgAQAZAJoAGAAgAgACAB0AGQAeAB8AQAQABgBYAJ0ADwAALABaAJ4AXAAABgBdAJ8AMgAALABaAKAAPwABCAAhACIACgCbACQAJQAOAA8A'
..'EACcABIADwATAFcAKAApABgAIwEAGQChAGEAIwMAAgBiABkAogBkAKMABgABCgCkAKUACAAJACEAIgAKAKYAJAAlAA4ADwAQAKcAEgAPABMANgAVAAkABgABCQAIAAkAIQAiAAoAqAAkACUADgAPABAAqQASAA8AEwBQABUACQAYACcBABkAqgBhACcDAAIAfAAZAKsA'
..'ZACsAB8AQAQABgCyALMArgAABgC0ALUArgAABgC2ALcArgAABgC0ALgArgABCQAhACIACgCtAAwADQAkACUADgCuABAArwASALAAEwCxACgAKQAYACoBABkAuQAfAEACQAJAA4AGAMAAwQAPAIAGAMAAwgAPAAEGAMMAxAAPAMUAxgByAIEGAMcAyAA/AMkAxgByAAEG'
..'AMoAvgDLAMkAxgByAAEJAAIAugAhALsACgC8AAwADQAkAL0ADgAPABAAvgASAA8AEwC/AEwALAUASwAXAEwAzAAWAM0AzgDFAM8AxQBMACwEAEwAzAAWAM0AzgDFAM8AxQBMACwFAEsA0ABMAMwAFgDNAM4AxQDPAMUATAAsBQBLAMkATADMABYAzQDOAMUAzwDFANEA'
..'LA0A0gDTACQA1ADVAA0A1gDXANgA2QDaANsA3ADdABIA3gATAN8A4ADhAOIA4wBMAOQAFgDlAGEALAMAAgDmABkA5wBkAOgABgABCgACAOkACAAJACEAIgAKAOoAJAAlAA4A6wAQAOwAEgDrABMA7QAVAAkA7gAzAQDvAPAA8QA0BQDyAPMA9AC9APUACQAQAPYAEwD3'
..'APgAMwMA+QDNAPoA+wD8AP0AGAAzAQAZAP4ABgABCgACAOkACAAJACEAIgAKAP8AJAAlAA4A6wAQAAABEgDrABMA7QAVAAkA7gA4AQDvAPAA8QA5BQDyAPMA9AC9APUACQAQAPYAEwD3APgAOAMA+QDNAPoA+wD8AP0AGAA4AQAZAAEBAgEBAQACAAMBBAE9AgACAAUB'
..'BgEHAQQBPQIAAgAIAQYBxQAEAT0CAAIA4AAGAQkBBAE9AgACAAoBBgHJAAQBPQIAAgALAQYB0AAMAQEBAAIADQEOAUMCAAIADwEQASkAEQFEAQACABIBEwFDAQACABQBHwBAAkACQAOABgDAABgBDwCABgDAABkBDwABBgDDABoBDwDFAMYAcgCBBgDHABsBPwDJAMYA'
..'cgABBgDKABcBywDJAMYAcgABCQACABUBIQC7AAoAFgEMAA0AJAC9AA4ADwAQABcBEgAPABMAvwBMAEcFAEsAFwBMAMwAFgDNAM4AxQDPAMUATABHBABMAMwAFgDNAM4AxQDPAMUATABHBQBLANAATADMABYAzQDOAMUAzwDFAEwARwUASwDJAEwAzAAWAM0AzgDFAM8A'
..'xQDRAEcNANIA0wAkANQA1QANANYA1wDYANkA2gDbANwA3QASAN4AEwDfAOAA4QDiAOMATADkABYA5QAfAEACQAJAA4AGAMAAHwEPAIAGAMAAIAEPAAEGAMMAIQEPAMUAxgByAIEGAMcAIgE/AMkAxgByAAEGAMoAHgHLAMkAxgByAAEJAAIAHAEhALsACgAdAQwADQAk'
..'AL0ADgAPABAAHgESAA8AEwC/AEwATQUASwAXAEwAzAAWAM0AzgDFAM8AxQBMAE0EAEwAzAAWAM0AzgDFAM8AxQBMAE0FAEsA0ABMAMwAFgDNAM4AxQDPAMUATABNBQBLAMkATADMABYAzQDOAMUAzwDFANEATQ0A0gDTACQA1ADVAA0A1gDXANgA2QDaANsA3ADdABIA'
..'3gATAN8A4ADhAOIA4wBMAOQAFgDlAGEATQMAAgAjARkA5wBkACQBHwBAAkACQAOABgDAACgBDwCABgDAACkBDwABBgDDACoBDwDFAMYAcgCBBgDHACsBPwDJAMYAcgABBgDKACcBywDJAMYAcgABCQACACUBIQC7AAoAJgEMAA0AJAC9AA4ADwAQACcBEgAPABMAvwBM'
..'AFQFAEsAFwBMAMwAFgDNAM4AxQDPAMUATABUBABMAMwAFgDNAM4AxQDPAMUATABUBQBLANAATADMABYAzQDOAMUAzwDFAEwAVAUASwDJAEwAzAAWAM0AzgDFAM8AxQDRAFQNANIA0wAkANQA1QANANYA1wDYANkA2gDbANwA3QASAN4AEwDfAOAA4QDiAOMATADkABYA'
..'5QAsAQEJAAIALQEhALsACgAuASQAvQAOAA8AEAAvARIADwATADABFQAJADEBAQMAAgAyAQoAMwE0ATUBNgMbABQDHAACBBsAAgQcAFQGGwAUBhwABQobABQKHAAJDBsAFAwcAAsNGwALDRwARw8bABQPHAAOEBsADhAcACYSGwAUEhwAERMbABETHABNFRsAFBUcAFoY'
..'GwAUGBwAJhobABQaHAAZGxsAGRscACYdGwAUHRwAHB8bABQfHAAeIRsAFCEcACAiGwAgIhwALCQbABQkHAAjJRsAIyUcACYoGwAUKBwAJykbACcpHAAmKxsAFCscACoyGwAsMhwAJjcbABQ3HAAzPBsAFDwcADhTGwBNUxwAJg==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()

-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 2872 characters

local ScriptFunctions = {
function(script,require)
local ClaimColour = BrickColor.new("Institutional white")
local TeamColour = BrickColor.new("Institutional white")
local TeamName = nil
function onTouched(hit)
	local Same = false
	if hit then
		if hit.Parent then
			local Humanoid = hit.Parent:FindFirstChildOfClass("Humanoid")
			if Humanoid then
				if Humanoid.Health <= 0 then return end
				if hit.Parent.Name == script.Parent.Parent.Top.Player.Text.Text then
					Same = true
				end
				script.Parent.Parent.Top.Player.Text.Text = hit.Parent.Name
				local Colors = hit.Parent:FindFirstChildOfClass("BodyColors")
				if Colors then
					ClaimColour = Colors.TorsoColor
				else
					local Torso = hit.Parent:FindFirstChild("Torso") or hit.Parent:FindFirstChild("UpperTorso")
					if Torso then
						ClaimColour = Torso.BrickColor
					end
				end
				local ColourChildren = script.Parent.Parent.Colour:GetChildren()
				for i = 1,#ColourChildren do
					if ColourChildren[i]:IsA("Part") then
						ColourChildren[i].BrickColor = ClaimColour
					end
					if ColourChildren[i]:IsA("SpawnLocation") then
						ColourChildren[i].TeamColor = ClaimColour
						ColourChildren[i].Enabled = true
						ColourChildren[i].Neutral = true
					end
				end
				local Player = game.Players:GetPlayerFromCharacter(hit.Parent)
				if Player then
					if Player.Neutral then
						TeamColour = BrickColor.new("Institutional white")
						TeamName = nil
						script.Parent.Parent.Top.Team.Text.Text = "[No Team]"
						local ColourChildren = script.Parent.Parent.Colour:GetChildren()
						for i = 1,#ColourChildren do
							if ColourChildren[i]:IsA("SpawnLocation") then
								ColourChildren[i].Enabled = false
							end
						end
					else
						TeamColour = Player.TeamColor
						if Player.Team == nil then
							TeamName = "[No Team Name]"
						else
							TeamName = Player.Team.Name
						end
						script.Parent.Parent.Top.Team.Text.Text = TeamColour.Name
						script.Parent.Parent.Top.Team.Text.Text = script.Parent.Parent.Top.Team.Text.Text..[[
						
						]]..TeamName
						local ColourChildren = script.Parent.Parent.Colour:GetChildren()
						for i = 1,#ColourChildren do
							if ColourChildren[i]:IsA("Part") then
								ColourChildren[i].BrickColor = TeamColour
							end
							if ColourChildren[i]:IsA("SpawnLocation") then
								ColourChildren[i].TeamColor = TeamColour
								ColourChildren[i].Neutral = false
							end
						end
					end
				else
					TeamColour = BrickColor.new("Institutional white")
					TeamName = nil
					script.Parent.Parent.Top.Team.Text.Text = "[NPC]"
					local ColourChildren = script.Parent.Parent.Colour:GetChildren()
					for i = 1,#ColourChildren do
						if ColourChildren[i]:IsA("SpawnLocation") then
							ColourChildren[i].TeamColor = TeamColour
							ColourChildren[i].Enabled = false
							ColourChildren[i].Neutral = false
						end
					end
				end
				if Same == false then
					FanFare()
				end
			end
		end
	end
end
script.Parent.Touched:connect(onTouched)

function FanFare()
	local Fraction
	local Number = math.random(1,3)
	if Number == 1 then
		Fraction = 0.5
	elseif Number == 2 then
		Fraction = 1
	else
		Fraction = 2
	end
	script.Parent.Victory.PlaybackSpeed = 0.6 / Fraction
	for i = 1,2 do
		script.Parent.Victory:Play()
		wait(0.05)
	end
	wait(0.15)
	script.Parent.Victory.PlaybackSpeed = 0.8 / Fraction
	script.Parent.Victory:Play()
	wait(0.2)
	script.Parent.Victory.PlaybackSpeed = 0.6 / Fraction
	script.Parent.Victory:Play()
	wait(0.2)
	script.Parent.Victory.PlaybackSpeed = 0.4 / Fraction
	script.Parent.Victory:Play()
	wait(0.2)
	script.Parent.Victory.PlaybackSpeed = 0.8 / Fraction
	script.Parent.Victory:Play()
	wait(0.2)
	script.Parent.Victory.PlaybackSpeed = 1 / Fraction
	script.Parent.Victory:Play()
end
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AACfIQVNb2RlbCEETmFtZSEERmxhZyELUHJpbWFyeVBhcnQhCldvcmxkUGl2b3QEEIeIIQRQYXJ0IQRCYXNlIQhBbmNob3JlZCIhBkNGcmFtZSEGTG9ja2VkIQhNYXRlcmlhbAMAAAAAAICQQCEIUG9zaXRpb24KAAC0QgAAAD8AACBCIQRTaXplCgAAgEEAAIA/AACA'
..'QSEEU25hcCECQzAEiYqLIQJDMQSMio0hBVBhcnQwIQVQYXJ0MQSOj5AEkYqNBJKTigSRjYcElIqNBJWKjQSWio0El4qNIQRQb2xlBCWHiAMAAAAAAACRQAoAALRCAACAQQAAIEIKAAAAQAAA8EEAAABAIQZTY3JpcHQhBUNsYWltIQVTb3VuZCEHVmljdG9yeSESUm9s'
..'bE9mZk1heERpc3RhbmNlAwAAACBfoAJCIRJSb2xsT2ZmTWluRGlzdGFuY2UDAAAAAAAAWUAhB1NvdW5kSWQhFXJieGFzc2V0aWQ6Ly8xMjIyMjI1MyEGVm9sdW1lAwAAAAAAAAhAIQRXZWxkBIqLmASZjYghBkNvbG91cgSah4ghCkJyaWNrQ29sb3IH6QMEQIeIIQpD'
..'YW5Db2xsaWRlAiEFQ29sb3IG+Pj4AwAAAAAAQJRACgAAoEIAAMxBAAAgQiEMUmlnaHRTdXJmYWNlAwAAAAAAAABACgAAkEEAADBBAACAPyEFTGlnaHQESZuIAwAAAAAAAHJAIQtPcmllbnRhdGlvbgoAAAAAAAA0QwAAAAAKAAClQgAAwD8AACJCIQhSb3RhdGlvbgoA'
..'ADTDAAAAAAAANMMKAACAPwAAgD8AADBBBE6HiAoAAMNCAADAPwAAHkIEUZOICgAAAAAAALRCAAAAAAoAALNCAADAPwQAAkIEVI2ICgAAAAAAALTCAAAAAAoAALVCAADAPwAAPkIhDVNwYXduTG9jYXRpb24EV4eICgAArELg/78/AAAwQgoAAMBAAACAPwAAwEAhClRv'
..'cFN1cmZhY2UDAAAAAAAAAAAhB0VuYWJsZWQhCVRlYW1Db2xvciEFRGVjYWwhBEZhY2UDAAAAAAAA8D8hB1RleHR1cmUhJXJieGFzc2V0Oi8vdGV4dHVyZXMvU3Bhd25Mb2NhdGlvbi5wbmcEY4eICgAAvELg/78/AAAwQgRlh4gKAACsQuD/vz8AABBCBGeHiAoAALxC'
..'4P+/PwAAEEIhA1RvcARqh4gKAAC0Qv7/+0EAACBCCgAAAEAAAIA/AAAAQCEMQmlsbGJvYXJkR3VpIQZQbGF5ZXIhC01heERpc3RhbmNlAwAAAAAAAGlADAAAAADIAAAAAAAyACELU3R1ZHNPZmZzZXQKAAAAAAAAoEAAAAAAIQlUZXh0TGFiZWwhBFRleHQhEEJhY2tn'
..'cm91bmRDb2xvcjMG////IRZCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5IQRGb250AwAAAAAAACBAIQhbTm9ib2R5XSEKVGV4dENvbG9yMyEIVGV4dFNpemUDAAAAAAAAOEAhFlRleHRTdHJva2VUcmFuc3BhcmVuY3khC1RleHRXcmFwcGVkIQRUZWFtCgAAAAAAAHBBAAAA'
..'ACEJW05vIFRlYW1dBgAAACEQVGV4dFN0cm9rZUNvbG9yMwScnZ4En4eNCgAAgD8AAAAAAAAAAAoAAAAAAACAPwAAAAAKAAAAAAAAAD8AAAAACgAAgL8AAAAAAAAAAAoAAACAAAAAAAAAgD8KAAAAAAAAcMEAAAAACgAAAAAAAAAAAACAPwoIAPDAAAAAv8AAAD8KBwCA'
..'PwAAAAAAANC1CgAA0LUAAAAABwCAvwoAAPDAAAAAvwAAAD8K4P/vwAAAAL8AAAA/CgAAAAAAAAAAAACAvwoAAIBAgP//vgAAgMAKAACAwID//74AAIDACgAAgECA//++AACAQAoAAIDAgP//vgAAgEAKAAAAgAAAgD8AAAAACgAAEEEAABjBAAAAAAoAAKlC/v9/QQIA'
..'IEIKBwCAvwAAAAAAANC1CgAAAAAAAAC/AAAAAAoAAIA/AAAAgAAAAAAKAAAAAAAAAIAAAIA/CgAAAAD8/29BAAAAACMBAAIAAgMFBgcBBwACCAkKCwYMCg0ODxAREhMCAgAUFRYXEwICABQVFhoTAgIAFBUWGxMCAgAUFRYcEwICABQVFh0TAgIAFBUWHhMCAgAUFRYf'
..'EwICABQVFiATAgIAFBUWIQcBBwACIgkKCyMMCg0kDyURJicMAQACKCkMBQACKissLS4vMDEyMwwCABQ0FjUBAQIAAjYFNwcQCwACAwkKODkLOjs8PT4MCg0/D0BBQhFDBxALAAJECQo4OQtFPT4MCg1GR0gPSUpLEUwHEAkAAkQJCjg5C009PgwKDUYPThFMBxALAAJE'
..'CQo4OQtPPT4MCg1GR1APUUpQEUwHEAsAAkQJCjg5C1I9PgwKDUZHUw9USlMRTFUQCwAJCjg5C1Y9PgwKDSQPVxFYWVpbPFw5XRYCAF5fYGFVEAsACQo4OQtiPT4MCg0kD2MRWFlaWzxcOV0YAgBeX2BhVRALAAkKODkLZD0+DAoNJA9lEVhZWls8XDldGgIAXl9gYVUQ'
..'CwAJCjg5C2Y9PgwKDSQPZxFYWVpbPFw5XRwCAF5fYGEHAQcAAmgJCgtpDAoNJA9qEWtsHgQAAm1ubxFwcXJzHwoAAnR1dndfEXB4eXR6e3Z8fX5afwpsHgQAAoBubxFwcYFzIQsAAnR1dndfEXB4eXSCe4N8fYR2flp/ChMeAgAUhRaGFwEEAgMYAgMZDAQYAgQZEgUY'
..'AgUZEwYYAgYZFAcYAgcZFQgYAggZFgkYAgkZGAoYAgoZGgsYAgsZHA8YDA8ZESMYHiMZDA==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()

-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 6104 characters

local ScriptFunctions = {
function(script,require)
while true do
c = game.Workspace:GetChildren()
for i =1,#c do
if ((c[i].className == "Part" or c[i].className == "TrussPart" or c[i].className == "WedgePart" or c[i].className == "Seat" or c[i].className == "VehicleSeat") and (c[i].Position - script.Parent.Position).magnitude < (script.Parent.Size.X / 2.1) - 5) then
if c[i].Locked == false then
c[i].Material = Enum.Material.CorrodedMetal
c[i].Anchored = false
c[i]:BreakJoints()
end
end
if (c[i].className == "Model") then
end
g = c[i]:GetChildren()
for j =1,#g do
if ((g[j].className == "Part" or g[j].className == "TrussPart" or g[j].className == "WedgePart" or g[j].className == "Seat" or g[j].className == "VehicleSeat") and g[j].Name ~= script.Parent.Name and g[j].Name ~= "Glow" and (g[j].Position - script.Parent.Position).magnitude < (script.Parent.Size.X / 2.1) - 5) then
g[j].Material = Enum.Material.CorrodedMetal
g[j].Anchored = false
g[j]:BreakJoints()
end
if (g[j].className == "Model") then
end
t = g[j]:GetChildren()
for s =1,#t do
if ((t[s].className == "Part" or t[s].className == "TrussPart" or t[s].className == "WedgePart" or t[s].className == "Seat" or t[s].className == "VehicleSeat") and t[s].Name ~= script.Parent.Name and t[s].Name ~= "Glow" and (t[s].Position - script.Parent.Position).magnitude < (script.Parent.Size.X / 2.1) - 5) then
t[s].Material = Enum.Material.CorrodedMetal
t[s].Anchored = false
t[s]:BreakJoints()
end
if (t[s].className == "Model") then
end
a = t[s]:GetChildren()
for z =1,#a do
if ((a[z].className == "Part" or a[z].className == "TrussPart" or a[z].className == "WedgePart" or a[z].className == "Seat" or a[z].className == "VehicleSeat") and a[z].Name ~= script.Parent.Name and a[z].Name ~= "Glow" and (a[z].Position - script.Parent.Position).magnitude < (script.Parent.Size.X / 2.1) - 5) then
a[z].Material = Enum.Material.CorrodedMetal
a[z].Anchored = false
a[z]:BreakJoints()
end
if (a[z].className == "Model") then
end
p = a[z]:GetChildren()
for l =1,#p do
if ((p[l].className == "Part" or p[l].className == "TrussPart" or p[l].className == "WedgePart" or p[l].className == "Seat" or p[l].className == "VehicleSeat") and p[l].Name ~= script.Parent.Name and p[l].Name ~= "Glow" and (p[l].Position - script.Parent.Position).magnitude < (script.Parent.Size.X / 2.1) - 5) then
p[l].Material = Enum.Material.CorrodedMetal
p[l].Anchored = false
p[l]:BreakJoints()
end
end
end
end
end
end
wait(.3)
end

end,
function(script,require)
-- Fun nuke by berezaa
-- Credit to FriendlyBiscuit/eric for uploading the loopable alarm sound for me

wait(1)

script.Parent.Missle.Base.Anchored = true

debounce = false

script.Parent.Button.ClickDetector.MouseClick:connect(function()
	if debounce == false then
		debounce = true
		script.Parent.Button.Sound:Play()
		
		local siren = script.Parent.Button.Siren
		siren.Parent = workspace
		siren:Play()
		
		coroutine.resume(coroutine.create(function()
			local lights = script.Parent.Lights:GetChildren()
			for i=1,100 do
				for i,v in pairs(lights) do
					v.SpotLight.Enabled = true
				end
				wait(0.54)
				for i,v in pairs(lights) do
					v.SpotLight.Enabled = false
				end
				wait(0.54)			
			end
		end))
		
		wait(2)
		
		script.Parent.Missle.Base.Fire.Enabled = true
		script.Parent.Missle.Base.Smoke.Enabled = true
		
		wait(3)
		
		script.Parent.Missle.PrimaryPart = script.Parent.Missle.Base	
		for i=1,320 do
			script.Parent.Missle:SetPrimaryPartCFrame(script.Parent.Missle:GetPrimaryPartCFrame()+Vector3.new(0,0.05*((1.1^(i/5))/3),0))
			wait()
		end
		wait()
		for i=1,100 do
			script.Parent.Missle:SetPrimaryPartCFrame(script.Parent.Missle:GetPrimaryPartCFrame()+Vector3.new(0,0.05*(1.1^((250-i)/5)/3),0))
				script.Parent.Missle:SetPrimaryPartCFrame(script.Parent.Missle:GetPrimaryPartCFrame()*CFrame.Angles(0,math.pi/100,0))
				script.Parent.Missle:SetPrimaryPartCFrame(script.Parent.Missle:GetPrimaryPartCFrame()+Vector3.new(0,0,-i/100))	
			wait()
		end
		wait()
		for i=200,120,-1 do
			script.Parent.Missle:SetPrimaryPartCFrame(script.Parent.Missle:GetPrimaryPartCFrame()-Vector3.new(0,0.1*((1.1^(i/2.95))/4),0))
			wait()
		end	
		
		script.Parent.Missle.Tip.Transparency = 0
		script.Parent.Missle.Tip.CanCollide = false
		script.Parent.Missle.Tip.Mesh.Scale = Vector3.new(1,1,1)
		local boom = script.Parent.Button.Boom
		boom.Parent=workspace
		boom:Play()
		local frame = script.Parent.Missle.Tip.CFrame
			
		script.Parent.Missle.Tip.Touched:connect(function(hit)
			if hit:IsA("Part") or hit:IsA("BasePart") then
				hit.Material = Enum.Material.CorrodedMetal
				hit.Anchored = false
				hit:BreakJoints()
				local miniboom = script.Parent.Button.SmallBoom:clone()
				miniboom.Parent = hit
				miniboom:Play()
				wait()
				miniboom:Destroy()
			end
		end)
		
		script.Parent.Missle.Tip.Boom.Disabled = false	
		
		for i=1,400 do
			script.Parent.Missle.Tip.Size=script.Parent.Missle.Tip.Size+Vector3.new(3,3,3)
			script.Parent.Missle.Tip.CFrame=frame
			wait()
		end
		script.Parent.Missle.Tip.Boom.Disabled=true
		script.Parent.Missle:Destroy()
		siren:Stop()
		boom:Stop()
		
		
	end
end)
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AEAGASEFTW9kZWwhBE5hbWUhBE51a2UhCldvcmxkUGl2b3QE2gDbANwAIQZNaXNzbGUE3QDeAN8AIQRQYXJ0IQhBbmNob3JlZCIhDUJvdHRvbVN1cmZhY2UDAAAAAAAAAAAhCkJyaWNrQ29sb3IHNQEhBkNGcmFtZQQYAOAA4QAhBUNvbG9yBjSOQCEITWF0ZXJpYWwD'
..'AAAAAACAkEAhC09yaWVudGF0aW9uCgAAAADX4yXDAAC0wiEIUG9zaXRpb24KL0mgQWCXl0FSfx7BIQhSb3RhdGlvbgoAADRDj8JhwQAAtEIhBFNpemUKzswcQWdmnkC4HrVAIQpUb3BTdXJmYWNlIQVTaGFwZQMAAAAAAAAAQAQhAOAA4QAK8EigQVpyFUFTfh7BIQNU'
..'aXAH8QMEJwDgAOEABv//AAMAAAAAAAByQApvJ6BBlju7QVGKHsEKnpmhQJ6ZoUCemaFAIQZTY3JpcHQhBEJvb20hCERpc2FibGVkIQhJbnRWYWx1ZSEIQm9vbVNpemUhBVZhbHVlAwAAAACAhC5BIQtTcGVjaWFsTWVzaCEITWVzaFR5cGUDAAAAAAAACEAhBEJhc2UE'
..'NgDeAN8ACuF6W0KPwmHCSCEZQwovMKBBBJKAQNJEHsEKAICJQjMz5cGF6xvDIQVTbW9rZSEERmlyZQbsdiwhBEhlYXQDAAAAAAAANEAH6wMEQQDiAOMABhEREQoAALRCrseXwgAAAAAKj1icQb+zfEFSFEPBCgAAtEIAAAAArseXQgrdepQ+Fa4XQB6FO0AhBURlY2Fs'
..'IQRGYWNlIQdUZXh0dXJlIRdyYnhhc3NldGlkOi8vNTA2ODA2MTUyMQRJAOIA4wAKEI2lQb+zfEGku/PAIQlXZWRnZVBhcnQH/AMETgDgAOEABgD/AAowSqhBO1fFQKRHt8AKAACAQAAAgD9I4ZpABFIA5ADlAAqkcP1Aj8JhQQAAtEIK7zeYQTxXxUBSeFvBClyPAkEU'
..'rl9BPQqwQgRWAOYA5wAK7FG4PgAAy0KuR7BCCu40iEHG1LJAUdEOwQoULjJD4fqcQtcjtMIEWgDoAOkACs3MzL7NzJrCM7O3QgrwKLVBINqwQFNvLcEKcT3qv67HmsLXI7RCIQZMaWdodHME6gDrAOwAIQVMaWdodARiAOsA7AAhBkxvY2tlZAoAAAAAZmbPQgAAAAAK'
..'8BaqQRj4xj+nVL/ACgAANMOamZhCAAA0QwqZmVlAmJmZPwAAQEEhCVNwb3RMaWdodCEKQnJpZ2h0bmVzcwMAAAAAAABZQAb/AAQhB0VuYWJsZWQCIQRXZWxkIQJDMATtAO4A7wAhAkMxBPAA8QDyACEFUGFydDAEcwDzAPQACgAAAAAzM1tBAAAAAAqwXcNBGPjGP1LM'
..'MsEKmZlZQJiZmT9nZqZABO0A9QD2AAT3APgA+QAEeADzAPQACu+FgEEY+MY/UjcSwQT6APgA+QAEewDrAOwACu3LmUEQ+MY/UlplwQT7APEA8gAhBkJ1dHRvbgcVAASCAPwA/QAGxCgcCnsUF0KksCfDAAAAAArOrZhBiNZGQISa9r8KCpcNQzMzG8HXYyxDCuB6hEB1'
..'FI4/0MxMPiENQ2xpY2tEZXRlY3RvciEFU291bmQhBkxvb3BlZCEHU291bmRJZCEXcmJ4YXNzZXRpZDovLzM0MjQ1NjA2ODUhBlZvbHVtZQMAAAAAAAAUQCENUGxheWJhY2tTcGVlZAMAAABgZmbmPyEkaHR0cDovL3JvYmxveC5jb20vYXNzZXQ/aWQ9MTY1OTY5OTY0'
..'AwAAAAAAAPA/IQVTaXJlbiEXcmJ4YXNzZXRpZDovLzI4NDE2Nzk1MzYhCVNtYWxsQm9vbSEWcmJ4YXNzZXRpZDovLzMwNTY2NTg2MQMAAAAAAAAkQCEKU3VyZmFjZUd1aSEOWkluZGV4QmVoYXZpb3IhC0Fsd2F5c09uVG9wIRBDbGlwc0Rlc2NlbmRhbnRzIQ5MaWdo'
..'dEluZmx1ZW5jZSEKU2l6aW5nTW9kZSEJVGV4dExhYmVsIQZBY3RpdmUhEEJhY2tncm91bmRDb2xvcjMG////IRZCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5DAAAAADIAAAAAAAyACEERm9udCEEVGV4dCEGTEFVTkNIIQpUZXh0Q29sb3IzBgAAACEKVGV4dFNjYWxlZCEI'
..'VGV4dFNpemUDAAAAAAAALEAhFlRleHRTdHJva2VUcmFuc3BhcmVuY3khC1RleHRXcmFwcGVkIRlCZXJlemFhR2FtZXNOdWNsZWFyU2NyaXB0B0UBBLEA2wD+AAbf394DAAAAAAAAkUAKAAAAAI/CJMMAAAAACo7osEFQYTtAROktwAoAADRDCtdzwQAANEMKzsxAQRSu'
..'N0A8CldABLYA/wAAAQoAAAAAe5SYwo9CrkIKMQbiQQLYZ0GmAsnACgrXIzx7lJjCrkeuQgrVo75BKFzvPwAAAEAEuwD/AAABAwAAAAAAgJhACg5KlEE42HFBaSuGwQrVo75BKFzvPzMzP0EhDFRyYW5zcGFyZW5jeQMAAAAAAADgPwTAAP8AAAEKPw/WQX/lbEHSlUbB'
..'CtWjvkF7FCpBAAAAQATDAP8AAAEK8NirQSzlZ0Gla5bABMUA/wAAAQpfUFNBGvtsQdGWE8EK1aO+QWVmJkEAAABABMgA/wAAAQqxVcpBSNlxQapak8EH6gMEzQABAQIBBs3NzQoAAAAASOGVwgAAAAAKL9bWQUwJQ0BK3D7BCrceRUHielQ/IYULQATQAP8AAAEKXuY8'
..'QXfXcUFSEnLBBNMAAwEEAQoAAAAAmpmYwgAAAAAKXUdRQQhTH0BRxR/BCh2FW0EoXO8/AAAAQATWAP8AAAEKoJJrQRv8Z0FICUvABNgABQEGAQpvb5tBBGlDQGoLi8EKHYVbQeJ6VD/XoxBACuZFokHbf1hBI34cwQoY/3a/FBiCtI6Xhj4KSpPGtAAAgD8O8em0Cvc/'
..'pEHn0FtBi84bwQqaGU2/6iiFPpz5Cb8K41a3PqpkA7/Eq0e/CrBVDTUAAIC/lQfTNArPRXi/6a3etKOxeT4Kr7R5PmdJRbWeRXg/Cp5FeL+7u3G0r7R5Pgr7oQk93o59P+HWCD4KvkV4v9Rq+zWesnk+CmA8g7lD3H8/+D4HvQpRQkw+gLsEPdi3ej8KQPmDuULcfz9y'
..'QAe9Ch2GX74RNwS9nrB5vwqM8aFBGPjGP2KCIsEKg4ByvrCtRjXEt3i/CnhSeLQAAIA/uKBbNQoAAAAAAJoZvwAAAAAKAQCAPwAAAKoAAAAACgAAAAAAAAAAAQCAPwpQIt9BbGZYQsDCZUIKgIByvq2tRjXAt3i/CsO3eD8mp+A0fYByvgr0t3g/0FBuNHd9cr4K+Su0'
..'tAAAgD8pA+y0CgEAgD8AAACoAAAAAAoAAAAAAAAAqQEAgD8KEGn4QWxmWEJA+lBCCvO3eD/KUG40dH1yvgp3fXI+i/sHNfC3eD8KUJG1QWxmWEKAH1lCClDXzkFsZlhCwFZEQgo0HXq/Xk1ZtN1RWj4KRLUFvkpfSj8WLhm/CkuTxrQAAIA/EfHptAqMlkE8Eq5/P6ny'
..'Rj0K4WRyvvi/TD0fZXi/CvoAhT4wZES1IjZ3PwqOPlm0AACAP7j7WTUKiIByPpCtRbXEt3g/ChBFebQAAIA/3qdaNQr0t3g/z7ZuNHV9cr4Kg120tAAAgD8U9+u0NQEAAAIAAgADAAQABQABAAECAAIABgAEAAcACAACDAAJAAoACwAMAA0ADgAPABAAEQASABMAFAAV'
..'ABYAFwAYABkAGgAbABwAHQAMAB4AHwAIAAIMAAkACgALAAwADQAOAA8AIAARABIAEwAUABUAFgAXACEAGQAaABsAHAAdAAwAHgAfAAgAAg0AAgAiAAkACgALAAwADQAjAA8AJAARACUAEwAmABUAFgAXACcAGQAaABsAKAAdAAwAHgAMACkABQIAAgAqACsACgAsAAUC'
..'AAIALQAuAC8AMAAFAQAxADIACAACDQACADMACQAKAAsADAANAA4ADwA0ABEAEgATABQAFQA1ABcANgAZADcAGwAoAB0ADAAeAAwAOAAJAAA5AAkDABEAOgA7ADwAGwA8AAgAAgwACQAKAAsADAANAD0ADwA+ABEAPwATABQAFQBAABcAQQAZAEIAGwBDAB0ADAAeAB8A'
..'RAAMAgBFADIARgBHAAgAAgwACQAKAAsADAANAD0ADwBIABEAPwATABQAFQBAABcASQAZAEIAGwBDAB0ADAAeAB8ARAAOAgBFAAwARgBHAEoAAgoACQAKAAsADAANAEsADwBMABEATQATABQAFQAWABcATgAZABoAGwBPAEoAAgoACQAKAAsADAANAEsADwBQABEATQAT'
..'ABQAFQBRABcAUgAZAFMAGwBPAEoAAgoACQAKAAsADAANAEsADwBUABEATQATABQAFQBVABcAVgAZAFcAGwBPAEoAAgoACQAKAAsADAANAEsADwBYABEATQATABQAFQBZABcAWgAZAFsAGwBPAAEAAQIAAgBcAAQAXQAIABQKAAIAXgAJAAoACwAMAA8AXwBgAAoAFQBh'
..'ABcAYgAZAGMAGwBkAB0ADABlABUEAGYAZwARAGgAaQBqAEUAMgBrABUCAGwAbQBuAG8ACAAUCgACAF4ACQAKAAsADAAPAHEAYAAKABUAcgAXAHMAGQByABsAdAAdAAwAZQAYBABmAGcAEQBoAGkAagBFAAwAawAYAgBsAHUAbgB2AAgAFAoAAgBeAAkACgALAAwADwB3'
..'AGAACgAVAHIAFwB4ABkAcgAbAHQAHQAMAGUAGwQAZgBnABEAaABpAGoARQAyAGsAGwIAbAB1AG4AeQAIABQKAAIAXgAJAAoACwAMAA8AegBgAAoAFQBhABcAewAZAGMAGwBkAB0ADABlAB4EAGYAZwARAGgAaQBqAEUADABrAB4CAGwAbQBuAHwACAABDQACAH0ACQAK'
..'AAsADAANAH4ADwB/ABEAgABgAAoAEwAmABUAgQAXAIIAGQCDABsAhAAdAAwAhQAhAACGACEDAIcACgCIAIkAigCLAIYAIQQAAgAqAIwAjQCIAI4AigCPAIYAIQQAAgCQAIcACgCIAJEAigAfAIYAIQMAAgCSAIgAkwCKAJQAlQAhBQCWAI8AlwAKAJgACgCZAI8AmgCP'
..'AJsAJwsAnAAKAJ0AngCfAI8AGwCgAKEAPACiAKMApAClAKYACgCnAKgAqQAMAKoACgApAAEBAAIAqwBKAAEKAAkACgALAAwADQCsAA8ArQARAK4AEwCvABUAsAAXALEAGQCyABsAswAIAAELAAkACgALAAwADQCsAA8AtAARAK4AEwCvABUAtQAXALYAGQC3ABsAuAAd'
..'AAwACAABDAAJAAoACwAMAA0ArAAPALkAEQCuABMAugAVALUAFwC7ABkAtwAbALwAHQAMAL0AvgAIAAEMAAkACgALAAwADQCsAA8AvwARAK4AEwC6ABUAtQAXAMAAGQC3ABsAwQAdAAwAvQC+AAgAAQwACQAKAAsADAANAKwADwDCABEArgATALoAFQC1ABcAwwAZALcA'
..'GwC8AB0ADAC9AL4ACAABDAAJAAoACwAMAA0ArAAPAMQAEQCuABMAugAVALUAFwDFABkAtwAbAMYAHQAMAL0AvgAIAAELAAkACgALAAwADQCsAA8AxwARAK4AEwCvABUAtQAXAMgAGQC3ABsAuAAdAAwACAABCwAJAAoACwAMAA0AyQAPAMoAEQDLABMArwAVAMwAFwDN'
..'ABkAzAAbAM4AHQAMAAgAAQsACQAKAAsADAANAKwADwDPABEArgATAK8AFQC1ABcA0AAZALcAGwC4AB0ADAAIAAELAAkACgALAAwADQDJAA8A0QARAMsAEwCvABUA0gAXANMAGQDSABsA1AAdAAwACAABCwAJAAoACwAMAA0ArAAPANUAEQCuABMArwAVALUAFwDWABkA'
..'twAbALgAHQAMAAgAAQsACQAKAAsADAANAMkADwDXABEAywATAK8AFQByABcA2AAZAHIAGwDZAB0ADAAEF3AAFRpwABgdcAAbIHAAHg==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()

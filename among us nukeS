-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 4012 characters

local ScriptFunctions = {
function(script,require)
local button = script.Parent.Button
local model = script.Parent.Parent.Model
local cc = script.Parent.SirenBase.CylindricalConstraint
local siren = script.Parent.Siren
local L1 = siren.L1
local L2 = siren.L2
local L3 = siren.L3
local s_s = script.Parent.Sound.SirenSound
local s_e = script.Parent.Sound.ExplosionSound
local s_c = script.Parent.CountdownPart.Count
local ui = script.Parent.CountdownPart.BillboardGui.Countdown
local ex1 = script.Parent.explosion
local ex2 = ex1.e1
local ex3 = ex1.e2
local ex4 = ex1.e3
local ks = ex1.Kill
local set = script.Parent.Parent.Settings
local v_d = set.Delay
local v_es = set.ExplosionSize
local v_esp = set.ExplosionSpeed
local tween = game:GetService("TweenService")
if v_es.Value > 2048 then
	v_es.Value = 2048
end
button.ClickDetector.MouseClick:Connect(function()
	s_c:Play()
	button.Color = Color3.new(0.2,0.2,0.2)
	button.SurfaceGui.TextLabel.TextColor3 = Color3.new(0.1,0.1,0.1)
	button.ClickDetector:Destroy()
	wait(3)
	s_s:Play()
	tween:Create(s_s,TweenInfo.new(2,Enum.EasingStyle.Linear,Enum.EasingDirection.InOut),{
	Volume = 1}):Play()
	cc.AngularVelocity = -2
	siren.Material = "Neon"
	L1.Enabled = true
	L2.Enabled = true
	L3.Enabled = true
	ui.Visible = true
	ui.Text = v_d.Value
	for c = 1,(v_d.Value) do
		s_c:Stop()
		s_c:Play()
		s_c.PlaybackSpeed = s_c.PlaybackSpeed + 0.01
		ui.Text = ui.Text - 1
		wait(1)
	end
	button:Destroy()
	script.Parent.CountdownPart:Destroy()
	siren:Destroy()
	script.Parent.SirenBase:Destroy()
	ui.Visible = false
	model:Destroy()
	s_e:Play()
	ex1.Transparency = 0
	ex2.Transparency = 0
	ex3.Transparency = 0
	ex4.Transparency = 0
	ks.Disabled = false
	tween:Create(ex1,TweenInfo.new(v_esp.Value,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{
	Size = Vector3.new(v_es.Value,v_es.Value,v_es.Value)}):Play()
	tween:Create(ex2,TweenInfo.new(v_esp.Value,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{
	Size = Vector3.new(v_es.Value,v_es.Value,v_es.Value)}):Play()
	tween:Create(ex3,TweenInfo.new(v_esp.Value,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{
	Size = Vector3.new(v_es.Value,v_es.Value,v_es.Value)}):Play()
	tween:Create(ex4,TweenInfo.new(v_esp.Value,Enum.EasingStyle.Linear,Enum.EasingDirection.Out),{
	Size = Vector3.new(v_es.Value,v_es.Value,v_es.Value)}):Play()
	wait(v_esp.Value - 2)
	tween:Create(ex1,TweenInfo.new(2,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{
	Transparency = 1}):Play()
	tween:Create(ex2,TweenInfo.new(2,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{
	Transparency = 1}):Play()
	tween:Create(ex3,TweenInfo.new(2,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{
	Transparency = 1}):Play()
	tween:Create(ex4,TweenInfo.new(2,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{
	Transparency = 1}):Play()
	tween:Create(s_s,TweenInfo.new(2,Enum.EasingStyle.Linear,Enum.EasingDirection.InOut),{
	Volume = 0}):Play()
	tween:Create(s_e,TweenInfo.new(2,Enum.EasingStyle.Linear,Enum.EasingDirection.InOut),{
	Volume = 0}):Play()
	wait(2)
	ex1:Destroy()
	ex2:Destroy()
	ex3:Destroy()	
	ex4:Destroy()
	wait(2)
	script.Parent.Parent:Destroy()
end)
end,
function(script,require)
script.Parent.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild("Humanoid") ~= nil then
		hit.Parent.Humanoid.Health = 0
	elseif hit.Parent:FindFirstChild("Humanoid") == nil then
		wait()
	end
end)
end,
function(script,require)
--[[
Check the 'Settings' folder to configure the following features:

Delay: The amount of seconds before the bomb detonates.

ExplosionSize: The size of the explosion in studs. (max. 2048 due to roblox limits)

ExplosionSpeed: How much time it needs for the explosion to reach maximum radius.
]]--

end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AADZIQVNb2RlbCEETmFtZSENYW1vbmcgdXMgbnVrZSEKV29ybGRQaXZvdATCw8QhBkZvbGRlciEETWFpbiEFU291bmQhClNpcmVuU291bmQhB1NvdW5kSWQhF3JieGFzc2V0aWQ6Ly82NDY2NjcwOTgwIQZWb2x1bWUDAAAAAAAAAAAhDkV4cGxvc2lvblNvdW5kIRdy'
..'Ynhhc3NldGlkOi8vOTg2Nzc2OTc4OAMAAAAAAADwPyEGU2NyaXB0IQxFdmVudEhhbmRsZXIhCE1lc2hQYXJ0IQlleHBsb3Npb24hCEFuY2hvcmVkIiEKQnJpY2tDb2xvcgeFACEGQ0ZyYW1lBCLFxiEKQ2FzdFNoYWRvdwIhBUNvbG9yBtVzPSEITWF0ZXJpYWwDAAAA'
..'AAAAckAhCFBvc2l0aW9uCoPfr0EZQL1AhdB/QSEEU2l6ZQoAAABAAAAAQAAAAEAhDFRyYW5zcGFyZW5jeSEGTWVzaElkIRdyYnhhc3NldGlkOi8vNTA2NjczODA3MSEITWVzaFNpemUKZmaeQWZmnkFoZp5BIQRLaWxsIQhEaXNhYmxlZCECZTEhF3JieGFzc2V0aWQ6'
..'Ly80Nzg1NzI1Nzk1CgAAQEDY8TpAut0PQCECZTIEIsfIIQtPcmllbnRhdGlvbgoAAPDBH4Wgwj0KDcIhCFJvdGF0aW9uCgpXk8JmZmrC9qjUwiECZTMEIsnKCgAANEIAALRCAAAHwwoAALRCAAA0QgAAB0MhBFBhcnQhCVNpcmVuQmFzZSENQm90dG9tU3VyZmFjZQcu'
..'AQRBy8wGW11pAwAAAAAAgJBACgAAAAAAADTDAAC0wgqr35tBBqAGQYXQf0EKAAA0wwAAAAAAALRCCgAAgD8AAMA/AADAPyEKVG9wU3VyZmFjZSEFU2hhcGUDAAAAAAAAAEAhCkF0dGFjaG1lbnQhC0F0dGFjaG1lbnQwBEvNzgoAAACAAAA0QwAAAAAKAAAAvwAAAAAA'
..'AACAIRRCYWxsU29ja2V0Q29uc3RyYWludCELQXR0YWNobWVudDEET83OCgAAAL8AAACAAAAAgCEVQ3lsaW5kcmljYWxDb25zdHJhaW50IRNBbmd1bGFyQWN0dWF0b3JUeXBlIQ5Nb3Rvck1heFRvcnF1ZQMAAAAAAADwfyEOVW5pb25PcGVyYXRpb24hBVNpcmVuBxUA'
..'BFnP0AbEKBwKewacQQTJFkEl0H9BCgAANEMAAAAAAAC0QgoAAIA/AACAPwAAgD8DAAAAAAAA4D8KAAAAPxGtfT/fgH8/CmIInEEEyRJBd9B/QQMAAAAAAAAQQAoAAAAAAAAAAAAAAAAKEa19PxGtfT8RrX0/CmIInEEEyRZBd9B/QQMAAAAAAAAIQARm0dIKnxubtgAA'
..'NEP5Gpu2CgAAAD8AAACAAAAAAARo0dIKAAAAPwAAAAAAAAAAIQxTdXJmYWNlTGlnaHQhAkwzIQpCcmlnaHRuZXNzAwAAAAAAADlABv8AACEHRW5hYmxlZCEFQW5nbGUDAAAAAAAATkAhBEZhY2UhBVJhbmdlIQJMMiEKUG9pbnRMaWdodCECTDEDAAAAAAAAJEAhDUNv'
..'dW50ZG93blBhcnQHCwAEfNPUBoC72wMAAAAAAABxQAqdaptBBqAAQYXQf0EKbxKDOucHBD7aC8Y/IQxCaWxsYm9hcmRHdWkhDFJlc2V0T25TcGF3biEOWkluZGV4QmVoYXZpb3IhBkFjdGl2ZSELQWx3YXlzT25Ub3AhEENsaXBzRGVzY2VuZGFudHMhDkxpZ2h0SW5m'
..'bHVlbmNlDAAAAABkAAAAAABkACELU3R1ZHNPZmZzZXQKAAAAAAAAIEEAAAAAIQlUZXh0TGFiZWwhCUNvdW50ZG93biEQQmFja2dyb3VuZENvbG9yMwb///8hFkJhY2tncm91bmRUcmFuc3BhcmVuY3khD0JvcmRlclNpemVQaXhlbCEHVmlzaWJsZSEERm9udCEEVGV4'
..'dCECMzAhClRleHRDb2xvcjMhClRleHRTY2FsZWQhCFRleHRTaXplAwAAAAAAAFlAIRBUZXh0U3Ryb2tlQ29sb3IzBsgAACEWVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSELVGV4dFdyYXBwZWQhBUNvdW50IQtSb2xsT2ZmTW9kZSEXcmJ4YXNzZXRpZDovLzkwNjgwNzcw'
..'NTIhBkJ1dHRvbgSg1dYKAAAAAAAAtEIAAAAACsTzm0FePp5Aiq+VQQqcTkc/njyuP6CqsT8hDUNsaWNrRGV0ZWN0b3IhClN1cmZhY2VHdWkhClNpemluZ01vZGUMAAAAADIAAAAAACUAIQAGlgAAAwAAAAAAADxAIQVEZWNhbCEETnVrZSEHVGV4dHVyZSEqaHR0cDov'
..'L3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD02ODYwODMyNzM4BNfFxiEHYW1vbmd1cwSx2NkhCkNhbkNvbGxpZGUK17CbQfrokUDFTXtBCriGnUAM6RFB7MjSQCEXcmJ4YXNzZXRpZDovLzY2ODYzNzU5MDIKqFS2QbziKEK6+fNBIQlUZXh0dXJlSUQhF3JieGFzc2V0'
..'aWQ6Ly82Njg2Mzc1OTM3IQ1Db25maWd1cmF0aW9uIQhTZXR0aW5ncyELTnVtYmVyVmFsdWUhBURlbGF5IQVWYWx1ZQMAAAAAAABJQCENRXhwbG9zaW9uU2l6ZQMAAAAAAACgQCEORXhwbG9zaW9uU3BlZWQDAAAAAAAAMEAhDEluc3RydWN0aW9ucwpX369BG2nRQIXQ'
..'f0EKvH0JJwAAgL8AAAAACgAAgL+8fQknAAAAAAoAAIA/Z0CtM9ZBrbMKZ0CtswAAgD8AmB0rChT2Fb5LAAC/T4JaPwpz//8+8wQ1P0oAAD8Ky///vkcAAL/VBDU/CnX//74bAAC/EwU1vwraJmUnAACAvwAA6KgKAACAv+QmZScAAAAACgAAgL8AAAAAAAAAAAoAAAAA'
..'AACAPwAAAAAK3UCtMwAAgL8QPSIyCgAAgL/dQK2z1UGtMwoAAIC/HkGts64tIrIKHkGtswAAgD/XQa0zCgAAgD/cQK0z1UGtswrcQK2zAACAP2E/IrIKUVK3GgEAALMCAIC/ClBSN6cAAIA/AQAAMwqj369BH0DVQIXQf0EKAACAP1BSN6cAAAAAClBSN6cAAIA/AAAA'
..'ACcBAAIAAgMEBQYBAQACBwYCAQACCAgDAwACCQoLDA0IAwMAAg4KDwwQEQIBAAISEwIMAAIUFRYXGBkaGxwdHh8gISIjJCUQJicoKREHAgACKisWEwcMAAIsFRYXGBkaGxwdHh8gISIjJCUQJi0oLhMHDgACLxUWFxgZMBscHR4fIDEyISIzNCMkJRAmLSguEwcOAAI1'
..'FRYXGBk2GxwdHh8gMTchIjM4IyQlECYtKC45Ag4AAjoVFjsNFzwZPRscHT4fPzFAIUEzQiNDRA1FRkcMBAACSBlJMUohS0wMAABHDAQAAkgZTjFKIU9QDAIAURBSU1RAAgE5XV5AX1tgATlhYmBjW2ACCgACVRdWGVcdWB8gMUAhWTNaI1slXEcRBAACTRlkMWUhZkcR'
..'BAACTRlnMWUhaGkRBwACamtsHW1uHG9wcUZycGkRBgACc2tsHW1uHG9wcnB0EQUAAnVrbB1tbhxydjkCDAACdxUWOw0XeBl5Gxwdeh97IXwjfUQNJVx+FwgAfxyAEIEWghaDFoQQI4WGh4gYDgACiYqLjBCNDSOFjhyPRpCRkm2TFpSVlpeYDZkWCBcDAAKamxAKnDkC'
..'DQACnRUWOw0XVhmeGxwdWB8gMZ8hoDOfI6FEDaIbAACjGwUAgBCDFnENhBCkEIgdBwCKi4wQI6WPY5CmkqeUqKkbAwACqnFjq6wGAQEAAgEBIAEABK0TIQkAAq4VFhmvsBwhsSOyJrMotLW2twEBAAK4uSMCAAK6u7y5IwIAAr27vrkjAgACv7vAEQECAALBKxYEDkgN'
..'Dk0SEEgPEE0T')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
